var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
(function (deps, factory) {
    if (typeof module === 'object' && typeof module.exports === 'object') {
        var v = factory(require, exports); if (v !== undefined) module.exports = v;
    }
    else if (typeof define === 'function' && define.amd) {
        define(deps, factory);
    }
})(["require", "exports", "./core", "./vocabularies/dynamic", "./vocabularies/next", "./vocabularies/unevaluated", "./vocabularies/discriminator", "./refs/json-schema-2019-09"], function (require, exports) {
    var _this = this;
    {
        AnySchemaObject;
    }
    from;
    "./types";
    var core_1 = require("./core");
    var dynamic_1 = require("./vocabularies/dynamic");
    var next_1 = require("./vocabularies/next");
    var unevaluated_1 = require("./vocabularies/unevaluated");
    var discriminator_1 = require("./vocabularies/discriminator");
    var json_schema_2019_09_1 = require("./refs/json-schema-2019-09");
    var META_SCHEMA_ID = "https://json-schema.org/draft/2019-09/schema";
    var Ajv2019 = (function (_super) {
        __extends(Ajv2019, _super);
        function Ajv2019(opts) {
            if (opts === void 0) { opts = {}; }
            _super.apply(this, [{}].concat(opts, [dynamicRef, true, next, true, unevaluated, true]));
        }
        return Ajv2019;
    })(core_1.default);
    _addVocabularies();
    void {
        super: ._addVocabularies(),
        this: .addVocabulary(dynamic_1.default),
        draft7Vocabularies: .forEach(function (v) { return _this.addVocabulary(v); }),
        this: .addVocabulary(next_1.default),
        this: .addVocabulary(unevaluated_1.default),
        if: function () { }, this: .opts.discriminator, this: .addKeyword(discriminator_1.default)
    };
    _addDefaultMetaSchema();
    void {
        super: ._addDefaultMetaSchema(),
        const: (_a = this.opts, $data = _a.$data, meta = _a.meta, _a),
        if: function () { } };
    !meta;
    return;
    json_schema_2019_09_1.default.call(this, $data);
    this.refs["http://json-schema.org/schema"] = META_SCHEMA_ID;
    defaultMeta();
    string | AnySchemaObject | undefined;
    {
        return (this.opts.defaultMeta =
            _super.defaultMeta.call(this) || (this.getSchema(META_SCHEMA_ID) ? META_SCHEMA_ID : undefined));
    }
    module.exports = exports = Ajv2019;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Ajv2019;
    var _a;
});
