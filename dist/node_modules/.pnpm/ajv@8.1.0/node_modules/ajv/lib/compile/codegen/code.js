var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
(function (deps, factory) {
    if (typeof module === 'object' && typeof module.exports === 'object') {
        var v = factory(require, exports); if (v !== undefined) module.exports = v;
    }
    else if (typeof define === 'function' && define.amd) {
        define(deps, factory);
    }
})(["require", "exports"], function (require, exports) {
    abstract;
    var _CodeOrName = (function () {
        function _CodeOrName() {
            this.abstract = readonly;
            this.abstract = readonly;
            this.abstract = toString();
            this.abstract = emptyStr();
        }
        return _CodeOrName;
    })();
    exports.IDENTIFIER = /^[a-z$_][a-z$_0-9]*$/i;
    var Name = (function (_super) {
        __extends(Name, _super);
        function Name(s) {
            _super.call(this);
            this.readonly = str;
            if (!exports.IDENTIFIER.test(s))
                throw new Error("CodeGen: name must be a valid identifier");
            this.str = s;
        }
        Name.prototype.toString = function () {
            return this.str;
        };
        Name.prototype.emptyStr = function () {
            return false;
        };
        Object.defineProperty(Name.prototype, "names", {
            get: function () {
                return (_a = {}, _a[this.str] = 1, _a);
                var _a;
            },
            enumerable: true,
            configurable: true
        });
        return Name;
    })(_CodeOrName);
    exports.Name = Name;
    var _Code = (function (_super) {
        __extends(_Code, _super);
        function _Code(code) {
            if (code === void 0) { code = CodeItem[]; }
            _super.call(this);
            this.readonly = _items;
            this.readonly = CodeItem[];
            this._items = typeof code === "string" ? [code] : code;
        }
        _Code.prototype.toString = function () {
            return this.str;
        };
        _Code.prototype.emptyStr = function () {
            if (this._items.length > 1)
                return false;
            var item = this._items[0];
            return item === "" || item === '""';
        };
        Object.defineProperty(_Code.prototype, "str", {
            get: function () {
                return (this._str ?  ?  = this._items.reduce(function (s, c) { return ("" + s + c); }, "") :  : );
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(_Code.prototype, "names", {
            get: function () {
                return (this._names ?  ?  = this._items.reduce(function (names, c) {
                    if (c instanceof Name)
                        names[c.str] = (names[c.str] || 0) + 1;
                    return names;
                }, {}) :  : );
            },
            enumerable: true,
            configurable: true
        });
        return _Code;
    })(_CodeOrName);
    exports._Code = _Code;
    null;
    null;
    exports.nil = new _Code("");
    function _(strs) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        var code = [strs[0]];
        var i = 0;
        while (i < args.length) {
            addCodeArg(code, args[i]);
            code.push(strs[++i]);
        }
        return new _Code(code);
    }
    exports._ = _;
    var plus = new _Code("+");
    function str(strs) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        var expr = [safeStringify(strs[0])];
        var i = 0;
        while (i < args.length) {
            expr.push(plus);
            addCodeArg(expr, args[i]);
            expr.push(plus, safeStringify(strs[++i]));
        }
        optimize(expr);
        return new _Code(expr);
    }
    exports.str = str;
    function addCodeArg(code, arg) {
        if (arg instanceof _Code)
            code.push.apply(code, arg._items);
        else if (arg instanceof Name)
            code.push(arg);
        else
            code.push(interpolate(arg));
    }
    exports.addCodeArg = addCodeArg;
    function optimize(expr) {
        var i = 1;
        while (i < expr.length - 1) {
            if (expr[i] === plus) {
                var res = mergeExprItems(expr[i - 1], expr[i + 1]);
                if (res !== undefined) {
                    expr.splice(i - 1, 3, res);
                    continue;
                }
                expr[i++] = "+";
            }
            i++;
        }
    }
    function mergeExprItems(a, b) {
        if (b === '""')
            return a;
        if (a === '""')
            return b;
        if (typeof a == "string") {
            if (b instanceof Name || a[a.length - 1] !== '"')
                return;
            if (typeof b != "string")
                return "" + a.slice(0, -1) + b + "\"";
            if (b[0] === '"')
                return a.slice(0, -1) + b.slice(1);
            return;
        }
        if (typeof b == "string" && b[0] === '"' && !(a instanceof Name))
            return "\"" + a + b.slice(1);
        return;
    }
    function strConcat(c1, c2) {
        return c2.emptyStr() ? c1 : c1.emptyStr() ? c2 : (_a = ["", "", ""], _a.raw = ["", "", ""], str(_a, c1, c2));
        var _a;
    }
    exports.strConcat = strConcat;
    // TODO do not allow arrays here
    function interpolate(x) {
        if (x === void 0) { x = null; }
        return typeof x == "number" || typeof x == "boolean" || x === null
            ? x
            : safeStringify(Array.isArray(x) ? x.join(",") : x);
    }
    function stringify(x) {
        return new _Code(safeStringify(x));
    }
    exports.stringify = stringify;
    function safeStringify(x) {
        return JSON.stringify(x)
            .replace(/\u2028/g, "\\u2028")
            .replace(/\u2029/g, "\\u2029");
    }
    exports.safeStringify = safeStringify;
    function getProperty(key) {
        return typeof key == "string" && exports.IDENTIFIER.test(key) ? new _Code("." + key) : (_a = ["[", "]"], _a.raw = ["[", "]"], _(_a, key));
        var _a;
    }
    exports.getProperty = getProperty;
    function regexpCode(rx) {
        return new _Code(rx.toString());
    }
    exports.regexpCode = regexpCode;
});
