var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
(function (deps, factory) {
    if (typeof module === 'object' && typeof module.exports === 'object') {
        var v = factory(require, exports); if (v !== undefined) module.exports = v;
    }
    else if (typeof define === 'function' && define.amd) {
        define(deps, factory);
    }
})(["require", "exports", "./code", "./scope", "./code", "./scope"], function (require, exports) {
    {
        ScopeValueSets, NameValue, ValueScope, ValueScopeName;
    }
    from;
    "./scope";
    var code_1 = require("./code");
    var scope_1 = require("./scope");
    var code_2 = require("./code");
    exports._ = code_2._;
    exports.str = code_2.str;
    exports.strConcat = code_2.strConcat;
    exports.nil = code_2.nil;
    exports.getProperty = code_2.getProperty;
    exports.stringify = code_2.stringify;
    exports.regexpCode = code_2.regexpCode;
    exports.Name = code_2.Name;
    var scope_2 = require("./scope");
    exports.Scope = scope_2.Scope;
    exports.ValueScope = scope_2.ValueScope;
    exports.ValueScopeName = scope_2.ValueScopeName;
    exports.varKinds = scope_2.varKinds;
    null;
    exports.operators = {
        GT: new code_1._Code(">"),
        GTE: new code_1._Code(">="),
        LT: new code_1._Code("<"),
        LTE: new code_1._Code("<="),
        EQ: new code_1._Code("==="),
        NEQ: new code_1._Code("!=="),
        NOT: new code_1._Code("!"),
        OR: new code_1._Code("||"),
        AND: new code_1._Code("&&"),
        ADD: new code_1._Code("+"),
    };
    abstract;
    var Node = (function () {
        function Node() {
            this.abstract = readonly;
        }
        Node.prototype.optimizeNodes = ;
        return Node;
    })();
    this | ChildNode | ChildNode[] | undefined;
    {
        return this;
    }
    optimizeNames(_names, UsedNames, _constants, Constants);
    this | undefined;
    {
        return this;
    }
    var Def = (function (_super) {
        __extends(Def, _super);
        function Def(readonly, Name, readonly, Name, rhs) {
            if (readonly === void 0) { readonly = varKind; }
            if (readonly === void 0) { readonly = name; }
            _super.call(this);
            this.readonly = readonly;
            this.readonly = readonly;
            this.rhs = rhs;
        }
        Def.prototype.render = function (_a) {
            var es5 = _a.es5, _n = _a._n;
            var varKind = es5 ? scope_1.varKinds.var : this.varKind;
            var rhs = this.rhs === undefined ? "" : " = " + this.rhs;
            return (varKind + " " + this.name + rhs + ";") + _n;
        };
        Def.prototype.optimizeNames = ;
        return Def;
    })(Node);
    this | undefined;
    {
        if (!names[this.name.str])
            return;
        if (this.rhs)
            this.rhs = optimizeExpr(this.rhs, names, constants);
        return this;
    }
    get;
    names();
    UsedNames;
    {
        return this.rhs instanceof code_1._CodeOrName ? this.rhs.names : {};
    }
    var Assign = (function (_super) {
        __extends(Assign, _super);
        function Assign(readonly, Code, rhs, readonly) {
            if (readonly === void 0) { readonly = lhs; }
            if (readonly === void 0) { readonly = sideEffects ?  : boolean; }
            _super.call(this);
            this.rhs = rhs;
            this.readonly = readonly;
        }
        Assign.prototype.render = function (_a) {
            var _n = _a._n;
            return (this.lhs + " = " + this.rhs + ";") + _n;
        };
        Assign.prototype.optimizeNames = ;
        return Assign;
    })(Node);
    this | undefined;
    {
        if (this.lhs instanceof code_1.Name && !names[this.lhs.str] && !this.sideEffects)
            return;
        this.rhs = optimizeExpr(this.rhs, names, constants);
        return this;
    }
    get;
    names();
    UsedNames;
    {
        var names = this.lhs instanceof code_1.Name ? {} : { this: .lhs.names };
        return addExprNames(names, this.rhs);
    }
    var AssignOp = (function (_super) {
        __extends(AssignOp, _super);
        function AssignOp(lhs, readonly, Code, rhs, sideEffects) {
            if (readonly === void 0) { readonly = op; }
            _super.call(this, lhs, rhs, sideEffects);
            this.readonly = readonly;
        }
        AssignOp.prototype.render = function (_a) {
            var _n = _a._n;
            return (this.lhs + " " + this.op + "= " + this.rhs + ";") + _n;
        };
        return AssignOp;
    })(Assign);
    var Label = (function (_super) {
        __extends(Label, _super);
        function Label(readonly, Name) {
            if (readonly === void 0) { readonly = label; }
            _super.call(this);
            this.readonly = names;
            this.UsedNames = {};
        }
        Label.prototype.render = function (_a) {
            var _n = _a._n;
            return (this.label + ":") + _n;
        };
        return Label;
    })(Node);
    var Break = (function (_super) {
        __extends(Break, _super);
        function Break(readonly) {
            if (readonly === void 0) { readonly = label ?  : Code; }
            _super.call(this);
            this.readonly = names;
            this.UsedNames = {};
        }
        Break.prototype.render = function (_a) {
            var _n = _a._n;
            var label = this.label ? " " + this.label : "";
            return ("break" + label + ";") + _n;
        };
        return Break;
    })(Node);
    var Throw = (function (_super) {
        __extends(Throw, _super);
        function Throw(readonly, Code) {
            if (readonly === void 0) { readonly = error; }
            _super.call(this);
        }
        Throw.prototype.render = function (_a) {
            var _n = _a._n;
            return ("throw " + this.error + ";") + _n;
        };
        Object.defineProperty(Throw.prototype, "names", {
            get: function () {
                return this.error.names;
            },
            enumerable: true,
            configurable: true
        });
        return Throw;
    })(Node);
    var AnyCode = (function (_super) {
        __extends(AnyCode, _super);
        function AnyCode(code) {
            _super.call(this);
            this.code = code;
        }
        AnyCode.prototype.render = function (_a) {
            var _n = _a._n;
            return (this.code + ";") + _n;
        };
        AnyCode.prototype.optimizeNodes = ;
        return AnyCode;
    })(Node);
    this | undefined;
    {
        return "" + this.code ? this : undefined;
    }
    optimizeNames(names, UsedNames, constants, Constants);
    this;
    {
        this.code = optimizeExpr(this.code, names, constants);
        return this;
    }
    get;
    names();
    UsedNames;
    {
        return this.code instanceof code_1._CodeOrName ? this.code.names : {};
    }
    abstract;
    var ParentNode = (function (_super) {
        __extends(ParentNode, _super);
        function ParentNode(readonly, ChildNode) {
            if (readonly === void 0) { readonly = nodes; }
            if (ChildNode === void 0) { ChildNode = (_a = [], _a); }
            _super.call(this);
            var _a;
        }
        ParentNode.prototype.render = function (opts) {
            return this.nodes.reduce(function (code, n) { return code + n.render(opts); }, "");
        };
        ParentNode.prototype.optimizeNodes = ;
        return ParentNode;
    })(Node);
    this | ChildNode | ChildNode[] | undefined;
    {
        var nodes = this.nodes;
        var i = nodes.length;
        while (i--) {
            var n = nodes[i].optimizeNodes();
            if (Array.isArray(n))
                nodes.splice.apply(nodes, [i, 1].concat(n));
            else if (n)
                nodes[i] = n;
            else
                nodes.splice(i, 1);
        }
        return nodes.length > 0 ? this : undefined;
    }
    optimizeNames(names, UsedNames, constants, Constants);
    this | undefined;
    {
        var nodes = this.nodes;
        var i = nodes.length;
        while (i--) {
            // iterating backwards improves 1-pass optimization
            var n = nodes[i];
            if (n.optimizeNames(names, constants))
                continue;
            subtractNames(names, n.names);
            nodes.splice(i, 1);
        }
        return nodes.length > 0 ? this : undefined;
    }
    get;
    names();
    UsedNames;
    {
        return this.nodes.reduce(function (names, n) { return addNames(names, n.names); }, {});
    }
    abstract;
    var BlockNode = (function (_super) {
        __extends(BlockNode, _super);
        function BlockNode() {
            _super.apply(this, arguments);
        }
        BlockNode.prototype.render = function (opts) {
            return "{" + opts._n + _super.prototype.render.call(this, opts) + "}" + opts._n;
        };
        return BlockNode;
    })(ParentNode);
    var Root = (function (_super) {
        __extends(Root, _super);
        function Root() {
            _super.apply(this, arguments);
        }
        return Root;
    })(ParentNode);
    var Else = (function (_super) {
        __extends(Else, _super);
        function Else() {
            _super.apply(this, arguments);
        }
        Else.readonly = kind = "else";
        return Else;
    })(BlockNode);
    var If = (function (_super) {
        __extends(If, _super);
        function If(condition, nodes) {
            _super.call(this, nodes);
            this.condition = condition;
        }
        If.prototype.render = function (opts) {
            var code = ("if(" + this.condition + ")") + _super.prototype.render.call(this, opts);
            if (this.else)
                code += "else " + this.else.render(opts);
            return code;
        };
        If.prototype.optimizeNodes = function () {
            _super.prototype.optimizeNodes.call(this);
            var cond = this.condition;
            if (cond === true)
                return this.nodes; // else is ignored here
            var e = this.else;
            if (e) {
                var ns = e.optimizeNodes();
                e = this.else = Array.isArray(ns) ? new Else(ns) : (ns);
                as;
                Else | undefined;
            }
            if (e) {
                if (cond === false)
                    return e instanceof If ? e : e.nodes;
                if (this.nodes.length)
                    return this;
                return new If(not(cond), e instanceof If ? [e] : e.nodes);
            }
            if (cond === false || !this.nodes.length)
                return undefined;
            return this;
        };
        If.prototype.optimizeNames = ;
        If.readonly = kind = "if";
        return If;
    })(BlockNode);
    this | undefined;
    {
        this.else = this.else ? .optimizeNames(names, constants)
            :
        ;
        if (!(_super.optimizeNames.call(this, names, constants) || this.else))
            return;
        this.condition = optimizeExpr(this.condition, names, constants);
        return this;
    }
    get;
    names();
    UsedNames;
    {
        var names = _super.names;
        addExprNames(names, this.condition);
        if (this.else)
            addNames(names, this.else.names);
        return names;
    }
    abstract;
    var For = (function (_super) {
        __extends(For, _super);
        function For() {
            _super.apply(this, arguments);
        }
        For.readonly = kind = "for";
        return For;
    })(BlockNode);
    var ForLoop = (function (_super) {
        __extends(ForLoop, _super);
        function ForLoop(iteration) {
            _super.call(this);
            this.iteration = iteration;
        }
        ForLoop.prototype.render = function (opts) {
            return ("for(" + this.iteration + ")") + _super.prototype.render.call(this, opts);
        };
        ForLoop.prototype.optimizeNames = ;
        return ForLoop;
    })(For);
    this | undefined;
    {
        if (!_super.optimizeNames.call(this, names, constants))
            return;
        this.iteration = optimizeExpr(this.iteration, names, constants);
        return this;
    }
    get;
    names();
    UsedNames;
    {
        return addNames(_super.names, this.iteration.names);
    }
    var ForRange = (function (_super) {
        __extends(ForRange, _super);
        function ForRange(readonly, Name, readonly, Name, readonly, SafeExpr, readonly, SafeExpr) {
            if (readonly === void 0) { readonly = varKind; }
            if (readonly === void 0) { readonly = name; }
            if (readonly === void 0) { readonly = from; }
            if (readonly === void 0) { readonly = to; }
            _super.call(this);
            this.readonly = readonly;
            this.readonly = readonly;
            this.readonly = readonly;
            this.readonly = readonly;
        }
        ForRange.prototype.render = function (opts) {
            var varKind = opts.es5 ? scope_1.varKinds.var : this.varKind;
            var _a = this, name = _a.name, from = _a.from, to = _a.to;
            return ("for(" + varKind + " " + name + "=" + from + "; " + name + "<" + to + "; " + name + "++)") + _super.prototype.render.call(this, opts);
        };
        Object.defineProperty(ForRange.prototype, "names", {
            get: function () {
                var names = addExprNames(_super.prototype.names, this.from);
                return addExprNames(names, this.to);
            },
            enumerable: true,
            configurable: true
        });
        return ForRange;
    })(For);
    var ForIter = (function (_super) {
        __extends(ForIter, _super);
        function ForIter() {
            _super.apply(this, arguments);
            this["of"] =  | "in";
            this.readonly = varKind;
            this.readonly = name;
        }
        return ForIter;
    })(For);
    {
        _super.call(this);
    }
    render(opts, CGOptions);
    string;
    {
        return ("for(" + this.varKind + " " + this.name + " " + this.loop + " " + this.iterable + ")") + _super.render.call(this, opts);
    }
    optimizeNames(names, UsedNames, constants, Constants);
    this | undefined;
    {
        if (!_super.optimizeNames.call(this, names, constants))
            return;
        this.iterable = optimizeExpr(this.iterable, names, constants);
        return this;
    }
    get;
    names();
    UsedNames;
    {
        return addNames(_super.names, this.iterable.names);
    }
    var Func = (function (_super) {
        __extends(Func, _super);
        function Func(name, args, async) {
            _super.call(this);
            this.name = name;
            this.args = args;
            this.async = async;
        }
        Func.prototype.render = function (opts) {
            var _async = this.async ? "async " : "";
            return (_async + "function " + this.name + "(" + this.args + ")") + _super.prototype.render.call(this, opts);
        };
        Func.readonly = kind = "func";
        return Func;
    })(BlockNode);
    var Return = (function (_super) {
        __extends(Return, _super);
        function Return() {
            _super.apply(this, arguments);
        }
        Return.prototype.render = function (opts) {
            return "return " + _super.prototype.render.call(this, opts);
        };
        Return.readonly = kind = "return";
        return Return;
    })(ParentNode);
    var Try = (function (_super) {
        __extends(Try, _super);
        function Try() {
            _super.apply(this, arguments);
        }
        Try.prototype.render = function (opts) {
            var code = "try" + _super.prototype.render.call(this, opts);
            if (this.catch)
                code += this.catch.render(opts);
            if (this.finally)
                code += this.finally.render(opts);
            return code;
        };
        Try.prototype.optimizeNodes = ;
        return Try;
    })(BlockNode);
    this;
    {
        _super.optimizeNodes.call(this);
        this.catch ? .optimizeNodes() : as;
        Catch | undefined;
        this.finally ? .optimizeNodes() : as;
        Finally | undefined;
        return this;
    }
    optimizeNames(names, UsedNames, constants, Constants);
    this;
    {
        _super.optimizeNames.call(this, names, constants);
        this.catch ? .optimizeNames(names, constants)
            :
                this.finally ? .optimizeNames(names, constants)
                    :
        ;
        return this;
    }
    get;
    names();
    UsedNames;
    {
        var names = _super.names;
        if (this.catch)
            addNames(names, this.catch.names);
        if (this.finally)
            addNames(names, this.finally.names);
        return names;
    }
    var Catch = (function (_super) {
        __extends(Catch, _super);
        function Catch(readonly, Name) {
            if (readonly === void 0) { readonly = error; }
            _super.call(this);
        }
        Catch.prototype.render = function (opts) {
            return ("catch(" + this.error + ")") + _super.prototype.render.call(this, opts);
        };
        Catch.readonly = kind = "catch";
        return Catch;
    })(BlockNode);
    var Finally = (function (_super) {
        __extends(Finally, _super);
        function Finally() {
            _super.apply(this, arguments);
        }
        Finally.prototype.render = function (opts) {
            return "finally" + _super.prototype.render.call(this, opts);
        };
        Finally.readonly = kind = "finally";
        return Finally;
    })(BlockNode);
    "\n" | "";
    var CodeGen = (function () {
        function CodeGen(extScope, opts) {
            if (opts === void 0) { opts = {}; }
            this.readonly = _scope;
            this.readonly = _extScope;
            this.readonly = _values;
            this.ScopeValueSets = {};
            this.readonly = _nodes;
            this.ParentNode = [];
            this.readonly = _blockStarts;
            this.number = (_a = [], _a);
            this.readonly = _constants;
            this.Constants = {};
            this.readonly = opts;
            this.opts = { opts: opts, _n: opts.lines ? "\n" : "" };
            this._extScope = extScope;
            this._scope = new scope_1.Scope({ parent: extScope });
            this._nodes = [new Root()];
            var _a;
        }
        CodeGen.prototype.toString = function () {
            return this._root.render(this.opts);
        };
        // returns unique name in the internal scope
        CodeGen.prototype.name = function (prefix) {
            return this._scope.name(prefix);
        };
        // reserves unique name in the external scope
        CodeGen.prototype.scopeName = function (prefix) {
            return this._extScope.name(prefix);
        };
        // reserves unique name in the external scope and assigns value to it
        CodeGen.prototype.scopeValue = function (prefixOrName, value) {
            var name = this._extScope.value(prefixOrName, value);
            var vs = this._values[name.prefix] || (this._values[name.prefix] = new Set());
            vs.add(name);
            return name;
        };
        CodeGen.prototype.getScopeValue = function (prefix, keyOrRef) {
            return this._extScope.getValue(prefix, keyOrRef);
        };
        // return code that assigns values in the external scope to the names that are used internally
        // (same names that were returned by gen.scopeName or gen.scopeValue)
        CodeGen.prototype.scopeRefs = function (scopeName) {
            return this._extScope.scopeRefs(scopeName, this._values);
        };
        CodeGen.prototype.scopeCode = function () {
            return this._extScope.scopeCode(this._values);
        };
        CodeGen.prototype._def = function (varKind, nameOrPrefix, rhs, constant) {
            var name = this._scope.toName(nameOrPrefix);
            if (rhs !== undefined && constant)
                this._constants[name.str] = rhs;
            this._leafNode(new Def(varKind, name, rhs));
            return name;
        };
        // `const` declaration (`var` in es5 mode)
        CodeGen.prototype.const = function (nameOrPrefix, rhs, _constant) {
            return this._def(scope_1.varKinds.const, nameOrPrefix, rhs, _constant);
        };
        // `let` declaration with optional assignment (`var` in es5 mode)
        CodeGen.prototype.let = function (nameOrPrefix, rhs, _constant) {
            return this._def(scope_1.varKinds.let, nameOrPrefix, rhs, _constant);
        };
        // `var` declaration with optional assignment
        CodeGen.prototype.var = function (nameOrPrefix, rhs, _constant) {
            return this._def(scope_1.varKinds.var, nameOrPrefix, rhs, _constant);
        };
        // assignment code
        CodeGen.prototype.assign = function (lhs, rhs, sideEffects) {
            return this._leafNode(new Assign(lhs, rhs, sideEffects));
        };
        // `+=` code
        CodeGen.prototype.add = function (lhs, rhs) {
            return this._leafNode(new AssignOp(lhs, exports.operators.ADD, rhs));
        };
        // appends passed SafeExpr to code or executes Block
        CodeGen.prototype.code = function (c) {
            if (typeof c == "function")
                c();
            else if (c !== code_1.nil)
                this._leafNode(new AnyCode(c));
            return this;
        };
        // returns code for object literal for the passed argument list of key-value pairs
        CodeGen.prototype.object = function () {
            var keyValues = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                keyValues[_i - 0] = arguments[_i];
            }
            var code = ["{"];
            for (var _a = 0; _a < keyValues.length; _a++) {
                var _b = keyValues[_a], key = _b[0], value = _b[1];
                if (code.length > 1)
                    code.push(",");
                code.push(key);
                if (key !== value || this.opts.es5) {
                    code.push(":");
                    code_1.addCodeArg(code, value);
                }
            }
            code.push("}");
            return new code_1._Code(code);
        };
        // `if` clause (or statement if `thenBody` and, optionally, `elseBody` are passed)
        CodeGen.prototype.if = function (condition, thenBody, elseBody) {
            this._blockNode(new If(condition));
            if (thenBody && elseBody) {
                this.code(thenBody).else().code(elseBody).endIf();
            }
            else if (thenBody) {
                this.code(thenBody).endIf();
            }
            else if (elseBody) {
                throw new Error('CodeGen: "else" body without "then" body');
            }
            return this;
        };
        // `else if` clause - invalid without `if` or after `else` clauses
        CodeGen.prototype.elseIf = function (condition) {
            return this._elseNode(new If(condition));
        };
        // `else` clause - only valid after `if` or `else if` clauses
        CodeGen.prototype.else = function () {
            return this._elseNode(new Else());
        };
        // end `if` statement (needed if gen.if was used only with condition)
        CodeGen.prototype.endIf = function () {
            return this._endBlockNode(If, Else);
        };
        CodeGen.prototype._for = function (node, forBody) {
            this._blockNode(node);
            if (forBody)
                this.code(forBody).endFor();
            return this;
        };
        // a generic `for` clause (or statement if `forBody` is passed)
        CodeGen.prototype.for = function (iteration, forBody) {
            return this._for(new ForLoop(iteration), forBody);
        };
        // `for` statement for a range of values
        CodeGen.prototype.forRange = function (nameOrPrefix, from, to, forBody, varKind) {
            if (varKind === void 0) { varKind = this.opts.es5 ? scope_1.varKinds.var : scope_1.varKinds.let; }
            var name = this._scope.toName(nameOrPrefix);
            return this._for(new ForRange(varKind, name, from, to), function () { return forBody(name); });
        };
        // `for-of` statement (in es5 mode replace with a normal for loop)
        CodeGen.prototype.forOf = function (nameOrPrefix, iterable, forBody, varKind) {
            var _this = this;
            if (varKind === void 0) { varKind = scope_1.varKinds.const; }
            var name = this._scope.toName(nameOrPrefix);
            if (this.opts.es5) {
                var arr = iterable instanceof code_1.Name ? iterable : this.var("_arr", iterable);
                return this.forRange("_i", 0, (_a = ["", ".length"], _a.raw = ["", ".length"], code_1._(_a, arr)), function (i) {
                    _this.var(name, (_a = ["", "[", "]"], _a.raw = ["", "[", "]"], code_1._(_a, arr, i)));
                    forBody(name);
                    var _a;
                });
            }
            return this._for(new ForIter("of", varKind, name, iterable), function () { return forBody(name); });
            var _a;
        };
        // `for-in` statement.
        // With option `ownProperties` replaced with a `for-of` loop for object keys
        CodeGen.prototype.forIn = function (nameOrPrefix, obj, forBody, varKind) {
            if (varKind === void 0) { varKind = this.opts.es5 ? scope_1.varKinds.var : scope_1.varKinds.const; }
            if (this.opts.ownProperties) {
                return this.forOf(nameOrPrefix, (_a = ["Object.keys(", ")"], _a.raw = ["Object.keys(", ")"], code_1._(_a, obj)), forBody);
            }
            var name = this._scope.toName(nameOrPrefix);
            return this._for(new ForIter("in", varKind, name, obj), function () { return forBody(name); });
            var _a;
        };
        // end `for` loop
        CodeGen.prototype.endFor = function () {
            return this._endBlockNode(For);
        };
        // `label` statement
        CodeGen.prototype.label = function (label) {
            return this._leafNode(new Label(label));
        };
        // `break` statement
        CodeGen.prototype.break = function (label) {
            return this._leafNode(new Break(label));
        };
        // `return` statement
        CodeGen.prototype.return = function (value) {
            var node = new Return();
            this._blockNode(node);
            this.code(value);
            if (node.nodes.length !== 1)
                throw new Error('CodeGen: "return" should have one node');
            return this._endBlockNode(Return);
        };
        // `try` statement
        CodeGen.prototype.try = function (tryBody, catchCode, finallyCode) {
            if (!catchCode && !finallyCode)
                throw new Error('CodeGen: "try" without "catch" and "finally"');
            var node = new Try();
            this._blockNode(node);
            this.code(tryBody);
            if (catchCode) {
                var error = this.name("e");
                this._currNode = node.catch = new Catch(error);
                catchCode(error);
            }
            if (finallyCode) {
                this._currNode = node.finally = new Finally();
                this.code(finallyCode);
            }
            return this._endBlockNode(Catch, Finally);
        };
        // `throw` statement
        CodeGen.prototype.throw = function (error) {
            return this._leafNode(new Throw(error));
        };
        // start self-balancing block
        CodeGen.prototype.block = function (body, nodeCount) {
            this._blockStarts.push(this._nodes.length);
            if (body)
                this.code(body).endBlock(nodeCount);
            return this;
        };
        // end the current self-balancing block
        CodeGen.prototype.endBlock = function (nodeCount) {
            var len = this._blockStarts.pop();
            if (len === undefined)
                throw new Error("CodeGen: not in self-balancing block");
            var toClose = this._nodes.length - len;
            if (toClose < 0 || (nodeCount !== undefined && toClose !== nodeCount)) {
                throw new Error("CodeGen: wrong number of nodes: " + toClose + " vs " + nodeCount + " expected");
            }
            this._nodes.length = len;
            return this;
        };
        // `function` heading (or definition if funcBody is passed)
        CodeGen.prototype.func = function (name, args, async, funcBody) {
            if (args === void 0) { args = code_1.nil; }
            this._blockNode(new Func(name, args, async));
            if (funcBody)
                this.code(funcBody).endFunc();
            return this;
        };
        // end function definition
        CodeGen.prototype.endFunc = function () {
            return this._endBlockNode(Func);
        };
        CodeGen.prototype.optimize = function (n) {
            if (n === void 0) { n = 1; }
            while (n-- > 0) {
                this._root.optimizeNodes();
                this._root.optimizeNames(this._root.names, this._constants);
            }
        };
        CodeGen.prototype._leafNode = function (node) {
            this._currNode.nodes.push(node);
            return this;
        };
        CodeGen.prototype._blockNode = function (node) {
            this._currNode.nodes.push(node);
            this._nodes.push(node);
        };
        CodeGen.prototype._endBlockNode = function (N1, N2) {
            var n = this._currNode;
            if (n instanceof N1 || (N2 && n instanceof N2)) {
                this._nodes.pop();
                return this;
            }
            throw new Error("CodeGen: not in block \"" + (N2 ? N1.kind + "/" + N2.kind : N1.kind) + "\"");
        };
        CodeGen.prototype._elseNode = function (node) {
            var n = this._currNode;
            if (!(n instanceof If)) {
                throw new Error('CodeGen: "else" without "if"');
            }
            this._currNode = n.else = node;
            return this;
        };
        Object.defineProperty(CodeGen.prototype, "_root", {
            get: function () {
                return this._nodes[0];
                as;
                Root;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CodeGen.prototype, "_currNode", {
            get: function () {
                var ns = this._nodes;
                return ns[ns.length - 1];
            },
            set: function (node) {
                var ns = this._nodes;
                ns[ns.length - 1] = node;
            },
            enumerable: true,
            configurable: true
        });
        return CodeGen;
    })();
    exports.CodeGen = CodeGen;
    function addNames(names, from) {
        for (var n in from)
            names[n] = (names[n] || 0) + (from[n] || 0);
        return names;
    }
    function addExprNames(names, from) {
        return from instanceof code_1._CodeOrName ? addNames(names, from.names) : names;
    }
    function optimizeExpr(expr, names, constants) {
        if (expr instanceof code_1.Name)
            return replaceName(expr);
        if (!canOptimize(expr))
            return expr;
        return new code_1._Code(expr._items.reduce(function (items, c) {
            if (c instanceof code_1.Name)
                c = replaceName(c);
            if (c instanceof code_1._Code)
                items.push.apply(items, c._items);
            else
                items.push(c);
            return items;
        }, []));
        function replaceName(n) {
            var c = constants[n.str];
            if (c === undefined || names[n.str] !== 1)
                return n;
            delete names[n.str];
            return c;
        }
        function canOptimize(e) {
            return (e instanceof code_1._Code &&
                e._items.some(function (c) { return c instanceof code_1.Name && names[c.str] === 1 && constants[c.str] !== undefined; }));
        }
    }
    function subtractNames(names, from) {
        for (var n in from)
            names[n] = (names[n] || 0) - (from[n] || 0);
    }
    function not(x) {
        return typeof x == "boolean" || typeof x == "number" || x === null ? !x : (_a = ["!", ""], _a.raw = ["!", ""], code_1._(_a, par(x)));
        var _a;
    }
    exports.not = not;
    var andCode = mappend(exports.operators.AND);
    // boolean AND (&&) expression with the passed arguments
    function and() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i - 0] = arguments[_i];
        }
        return args.reduce(andCode);
    }
    exports.and = and;
    var orCode = mappend(exports.operators.OR);
    // boolean OR (||) expression with the passed arguments
    function or() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i - 0] = arguments[_i];
        }
        return args.reduce(orCode);
    }
    exports.or = or;
    function mappend(op) {
        return function (x, y) { return (x === code_1.nil ? y : y === code_1.nil ? x : (_a = ["", " ", " ", ""], _a.raw = ["", " ", " ", ""], code_1._(_a, par(x), op, par(y)))); var _a; };
    }
    function par(x) {
        return x instanceof code_1.Name ? x : (_a = ["(", ")"], _a.raw = ["(", ")"], code_1._(_a, x));
        var _a;
    }
});
