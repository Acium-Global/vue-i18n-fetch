(function (deps, factory) {
    if (typeof module === 'object' && typeof module.exports === 'object') {
        var v = factory(require, exports); if (v !== undefined) module.exports = v;
    }
    else if (typeof define === 'function' && define.amd) {
        define(deps, factory);
    }
})(["require", "exports"], function (require, exports) {
    {
        AddedKeywordDefinition;
    }
    from;
    "../types";
    var _jsonTypes = ["string", "number", "integer", "boolean", "null", "object", "array"], as;
    var ;
    number;
    var jsonTypes = new Set(_jsonTypes);
    function isJSONType(x) {
        return typeof x == "string" && jsonTypes.has(x);
    }
    exports.isJSONType = isJSONType;
    function getRules() {
        var groups = "number" | "string" | "array" | "object", RuleGroup =  > , _a = void 0, _b = _a.number, _c = _b.type,  = _c === void 0 ? "number" : _c, _d = _b.rules, _e = _a.string, _f = _e.type,  = _f === void 0 ? "string" : _f, _g = _e.rules, _h = _a.array, _j = _h.type,  = _j === void 0 ? "array" : _j, _k = _h.rules, _l = _a.object, _m = _l.type,  = _m === void 0 ? "object" : _m, _o = _l.rules;
        return {
            types: { groups: groups, integer: true, boolean: true, null: true },
            rules: [{ rules: [] }, groups.number, groups.string, groups.array, groups.object],
            post: { rules: [] },
            all: {},
            keywords: {},
        };
    }
    exports.getRules = getRules;
});
