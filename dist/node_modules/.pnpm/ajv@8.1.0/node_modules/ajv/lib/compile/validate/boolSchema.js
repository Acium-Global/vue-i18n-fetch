(function (deps, factory) {
    if (typeof module === 'object' && typeof module.exports === 'object') {
        var v = factory(require, exports); if (v !== undefined) module.exports = v;
    }
    else if (typeof define === 'function' && define.amd) {
        define(deps, factory);
    }
})(["require", "exports", "../errors", "../codegen", "../names"], function (require, exports) {
    {
        KeywordErrorDefinition, KeywordErrorCxt;
    }
    from;
    "../../types";
    {
        SchemaCxt;
    }
    from;
    "..";
    var errors_1 = require("../errors");
    var codegen_1 = require("../codegen");
    var names_1 = require("../names");
    var boolError = {
        message: "boolean schema is false",
    };
    function topBoolOrEmptySchema(it) {
        var gen = it.gen, schema = it.schema, validateName = it.validateName;
        if (schema === false) {
            falseSchemaError(it, false);
        }
        else if (typeof schema == "object" && schema.$async === true) {
            gen.return(names_1.default.data);
        }
        else {
            gen.assign((_a = ["", ".errors"], _a.raw = ["", ".errors"], codegen_1._(_a, validateName)), null);
            gen.return(true);
        }
        var _a;
    }
    exports.topBoolOrEmptySchema = topBoolOrEmptySchema;
    function boolOrEmptySchema(it, valid) {
        var gen = it.gen, schema = it.schema;
        if (schema === false) {
            gen.var(valid, false); // TODO var
            falseSchemaError(it);
        }
        else {
            gen.var(valid, true); // TODO var
        }
    }
    exports.boolOrEmptySchema = boolOrEmptySchema;
    function falseSchemaError(it, overrideAllErrors) {
        var gen = it.gen, data = it.data;
        // TODO maybe some other interface should be used for non-keyword validation errors...
        var cxt = {
            gen: gen,
            keyword: "false schema",
            data: data,
            schema: false,
            schemaCode: false,
            schemaValue: false,
            params: {},
            it: it,
        };
        errors_1.reportError(cxt, boolError, undefined, overrideAllErrors);
    }
});
