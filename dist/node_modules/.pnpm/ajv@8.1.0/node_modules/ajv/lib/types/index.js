(function (deps, factory) {
    if (typeof module === 'object' && typeof module.exports === 'object') {
        var v = factory(require, exports); if (v !== undefined) module.exports = v;
    }
    else if (typeof define === 'function' && define.amd) {
        define(deps, factory);
    }
})(["require", "exports"], function (require, exports) {
    {
        CodeGen, Code, Name, ScopeValueSets, ValueScopeName;
    }
    from;
    "../compile/codegen";
    {
        SchemaEnv, SchemaCxt, SchemaObjCxt;
    }
    from;
    "../compile";
    {
        JSONType;
    }
    from;
    "../compile/rules";
    {
        KeywordCxt;
    }
    from;
    "../compile/validate";
    from;
    "../core";
     | number > {
        instancePath: string,
        parentData: (_a = {}, _a[K in T] = any, _a) // object or array
        ,
        parentDataProperty: T // string or number
        ,
        rootData: Record( | any[], dynamicAnchors, (_b = {}, _b[Ref in string] = ValidateFunction, _b))
    };
    data;
    is;
    T;
    errors ?  : null | ErrorObject[];
    evaluated ?  : Evaluated;
    schema: AnySchema;
    schemaEnv: SchemaEnv;
    source ?  : SourceCode;
    true;
    true;
    , any > , S = unknown > {
        keyword: K,
        instancePath: string,
        schemaPath: string,
        params: P,
        // Added to validation errors of "propertyNames" keyword schema
        propertyName: string,
        // Excluded if option `messages` set to false.
        message: string,
        // These are added with the `verbose` option.
        schema: S,
        parentSchema: AnySchemaObject,
        data: unknown
    };
     & {
        type: JSONType[],
        schemaType: JSONType[]
    };
    "string" | undefined;
    "number";
    validate: FormatValidator( | (T), string ? string | RegExp : never);
    async ?  : false | undefined;
    compare ?  : FormatCompare();
    "string" | undefined;
    "number";
    validate: AsyncFormatValidator < T >
        async;
    true;
    compare ?  : FormatCompare();
    true
        | RegExp
        | FormatValidator(
            | FormatDefinition(
                | FormatDefinition(
                    | AsyncFormatDefinition(
                        | AsyncFormatDefinition < number >
                    ))));
    var _a, _b;
});
