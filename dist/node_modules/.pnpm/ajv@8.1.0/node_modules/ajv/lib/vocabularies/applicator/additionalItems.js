(function (deps, factory) {
    if (typeof module === 'object' && typeof module.exports === 'object') {
        var v = factory(require, exports); if (v !== undefined) module.exports = v;
    }
    else if (typeof define === 'function' && define.amd) {
        define(deps, factory);
    }
})(["require", "exports", "../../compile/codegen", "../../compile/util"], function (require, exports) {
    {
        CodeKeywordDefinition,
            ErrorObject,
            KeywordErrorDefinition,
            AnySchema,
        ;
    }
    from;
    "../../types";
    {
        KeywordCxt;
    }
    from;
    "../../compile/validate";
    var codegen_1 = require("../../compile/codegen");
    var util_1 = require("../../compile/util");
    "additionalItems", { limit: number }, AnySchema >
    ;
    var error = {
        message: function (_a) {
            var len = _a.params.len;
            return (_b = ["must NOT have more than ", " items"], _b.raw = ["must NOT have more than ", " items"], codegen_1.str(_b, len));
            var _b;
        },
        params: function (_a) {
            var len = _a.params.len;
            return (_b = ["{limit: ", "}"], _b.raw = ["{limit: ", "}"], codegen_1._(_b, len));
            var _b;
        },
    };
    var def = {
        keyword: "additionalItems", as: , const: ,
        type: "array",
        schemaType: ["boolean", "object"],
        before: "uniqueItems",
        error: error,
        code: function (cxt) {
            var parentSchema = cxt.parentSchema, it = cxt.it;
            var items = parentSchema.items;
            if (!Array.isArray(items)) {
                util_1.checkStrictMode(it, '"additionalItems" is ignored when "items" is not an array of schemas');
                return;
            }
            validateAdditionalItems(cxt, items);
        },
    };
    function validateAdditionalItems(cxt, items) {
        var gen = cxt.gen, schema = cxt.schema, data = cxt.data, keyword = cxt.keyword, it = cxt.it;
        it.items = true;
        var len = gen.const("len", (_a = ["", ".length"], _a.raw = ["", ".length"], codegen_1._(_a, data)));
        if (schema === false) {
            cxt.setParams({ len: items.length });
            cxt.pass((_b = ["", " <= ", ""], _b.raw = ["", " <= ", ""], codegen_1._(_b, len, items.length)));
        }
        else if (typeof schema == "object" && !util_1.alwaysValidSchema(it, schema)) {
            var valid = gen.var("valid", (_c = ["", " <= ", ""], _c.raw = ["", " <= ", ""], codegen_1._(_c, len, items.length))); // TODO var
            gen.if(codegen_1.not(valid), function () { return validateItems(valid); });
            cxt.ok(valid);
        }
        function validateItems(valid) {
            gen.forRange("i", items.length, len, function (i) {
                cxt.subschema({ keyword: keyword, dataProp: i, dataPropType: util_1.Type.Num }, valid);
                if (!it.allErrors)
                    gen.if(codegen_1.not(valid), function () { return gen.break(); });
            });
        }
        var _a, _b, _c;
    }
    exports.validateAdditionalItems = validateAdditionalItems;
    exports.default = def;
});
