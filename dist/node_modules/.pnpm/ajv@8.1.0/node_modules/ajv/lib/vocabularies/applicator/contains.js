(function (deps, factory) {
    if (typeof module === 'object' && typeof module.exports === 'object') {
        var v = factory(require, exports); if (v !== undefined) module.exports = v;
    }
    else if (typeof define === 'function' && define.amd) {
        define(deps, factory);
    }
})(["require", "exports", "../../compile/codegen", "../../compile/util"], function (require, exports) {
    {
        CodeKeywordDefinition,
            KeywordErrorDefinition,
            ErrorObject,
            AnySchema,
        ;
    }
    from;
    "../../types";
    {
        KeywordCxt;
    }
    from;
    "../../compile/validate";
    var codegen_1 = require("../../compile/codegen");
    var util_1 = require("../../compile/util");
    "contains",
        { minContains: number, maxContains: number },
        AnySchema
            >
    ;
    var error = {
        message: function (_a) {
            var _b = _a.params, min = _b.min, max = _b.max;
            return max === undefined
                ? (_c = ["must contain at least ", " valid item(s)"], _c.raw = ["must contain at least ", " valid item(s)"], codegen_1.str(_c, min))
                : (_d = ["must contain at least ", " and no more than ", " valid item(s)"], _d.raw = ["must contain at least ", " and no more than ", " valid item(s)"], codegen_1.str(_d, min, max));
            var _c, _d;
        },
        params: function (_a) {
            var _b = _a.params, min = _b.min, max = _b.max;
            return max === undefined ? (_c = ["{minContains: ", "}"], _c.raw = ["{minContains: ", "}"], codegen_1._(_c, min)) : (_d = ["{minContains: ", ", maxContains: ", "}"], _d.raw = ["{minContains: ", ", maxContains: ", "}"], codegen_1._(_d, min, max));
            var _c, _d;
        },
    };
    var def = {
        keyword: "contains",
        type: "array",
        schemaType: ["object", "boolean"],
        before: "uniqueItems",
        trackErrors: true,
        error: error,
        code: function (cxt) {
            var gen = cxt.gen, schema = cxt.schema, parentSchema = cxt.parentSchema, data = cxt.data, it = cxt.it;
            var min;
            var max;
            var minContains = parentSchema.minContains, maxContains = parentSchema.maxContains;
            if (it.opts.next) {
                min = minContains === undefined ? 1 : minContains;
                max = maxContains;
            }
            else {
                min = 1;
            }
            var len = gen.const("len", (_a = ["", ".length"], _a.raw = ["", ".length"], codegen_1._(_a, data)));
            cxt.setParams({ min: min, max: max });
            if (max === undefined && min === 0) {
                util_1.checkStrictMode(it, "\"minContains\" == 0 without \"maxContains\": \"contains\" keyword ignored");
                return;
            }
            if (max !== undefined && min > max) {
                util_1.checkStrictMode(it, "\"minContains\" > \"maxContains\" is always invalid");
                cxt.fail();
                return;
            }
            if (util_1.alwaysValidSchema(it, schema)) {
                var cond = (_b = ["", " >= ", ""], _b.raw = ["", " >= ", ""], codegen_1._(_b, len, min));
                if (max !== undefined)
                    cond = (_c = ["", " && ", " <= ", ""], _c.raw = ["", " && ", " <= ", ""], codegen_1._(_c, cond, len, max));
                cxt.pass(cond);
                return;
            }
            it.items = true;
            var valid = gen.name("valid");
            if (max === undefined && min === 1) {
                validateItems(valid, function () { return gen.if(valid, function () { return gen.break(); }); });
            }
            else {
                gen.let(valid, false);
                var schValid = gen.name("_valid");
                var count = gen.let("count", 0);
                validateItems(schValid, function () { return gen.if(schValid, function () { return checkLimits(count); }); });
            }
            cxt.result(valid, function () { return cxt.reset(); });
            function validateItems(_valid, block) {
                gen.forRange("i", 0, len, function (i) {
                    cxt.subschema({
                        keyword: "contains",
                        dataProp: i,
                        dataPropType: util_1.Type.Num,
                        compositeRule: true,
                    }, _valid);
                    block();
                });
            }
            function checkLimits(count) {
                gen.code((_a = ["", "++"], _a.raw = ["", "++"], codegen_1._(_a, count)));
                if (max === undefined) {
                    gen.if((_b = ["", " >= ", ""], _b.raw = ["", " >= ", ""], codegen_1._(_b, count, min)), function () { return gen.assign(valid, true).break(); });
                }
                else {
                    gen.if((_c = ["", " > ", ""], _c.raw = ["", " > ", ""], codegen_1._(_c, count, max)), function () { return gen.assign(valid, false).break(); });
                    if (min === 1)
                        gen.assign(valid, true);
                    else
                        gen.if((_d = ["", " >= ", ""], _d.raw = ["", " >= ", ""], codegen_1._(_d, count, min)), function () { return gen.assign(valid, true); });
                }
                var _a, _b, _c, _d;
            }
            var _a, _b, _c;
        },
    };
    exports.default = def;
});
