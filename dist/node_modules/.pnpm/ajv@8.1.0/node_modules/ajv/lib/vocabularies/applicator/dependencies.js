(function (deps, factory) {
    if (typeof module === 'object' && typeof module.exports === 'object') {
        var v = factory(require, exports); if (v !== undefined) module.exports = v;
    }
    else if (typeof define === 'function' && define.amd) {
        define(deps, factory);
    }
})(["require", "exports", "../../compile/codegen", "../../compile/util", "../code"], function (require, exports) {
    {
        CodeKeywordDefinition,
            ErrorObject,
            KeywordErrorDefinition,
            SchemaMap,
            AnySchema,
        ;
    }
    from;
    "../../types";
    {
        KeywordCxt;
    }
    from;
    "../../compile/validate";
    var codegen_1 = require("../../compile/codegen");
    var util_1 = require("../../compile/util");
    var code_1 = require("../code");
    "dependencies",
        DependenciesErrorParams,
        (_a = {}, _a[K in string] = string[] | AnySchema, _a)
            >
    ;
    exports.error = {
        message: function (_a) {
            var _b = _a.params, property = _b.property, depsCount = _b.depsCount, deps = _b.deps;
            var property_ies = depsCount === 1 ? "property" : "properties";
            return (_c = ["must have ", " ", " when property ", " is present"], _c.raw = ["must have ", " ", " when property ", " is present"], codegen_1.str(_c, property_ies, deps, property));
            var _c;
        },
        params: function (_a) {
            var _b = _a.params, property = _b.property, depsCount = _b.depsCount, deps = _b.deps, missingProperty = _b.missingProperty;
            return (_c = ["{property: ", ",\n    missingProperty: ", ",\n    depsCount: ", ",\n    deps: ", "}"], _c.raw = ["{property: ", ",\n    missingProperty: ", ",\n    depsCount: ", ",\n    deps: ", "}"], codegen_1._(_c, property, missingProperty, depsCount, deps));
            var _c;
        },
    };
    var def = {
        keyword: "dependencies",
        type: "object",
        schemaType: "object",
        error: exports.error,
        code: function (cxt) {
            var _a = splitDependencies(cxt), propDeps = _a[0], schDeps = _a[1];
            validatePropertyDeps(cxt, propDeps);
            validateSchemaDeps(cxt, schDeps);
        },
    };
    function splitDependencies(_a) {
        var schema = _a.schema;
        var propertyDeps = {};
        var schemaDeps = {};
        for (var key in schema) {
            if (key === "__proto__")
                continue;
            var deps = Array.isArray(schema[key]) ? propertyDeps : schemaDeps;
            deps[key] = schema[key];
        }
        return [propertyDeps, schemaDeps];
    }
    function validatePropertyDeps(cxt, propertyDeps) {
        if (propertyDeps === void 0) { propertyDeps = cxt.schema; }
        var gen = cxt.gen, data = cxt.data, it = cxt.it;
        if (Object.keys(propertyDeps).length === 0)
            return;
        var missing = gen.let("missing");
        for (var prop in propertyDeps) {
            var deps = propertyDeps[prop], as = string[];
            if (deps.length === 0)
                continue;
            var hasProperty = code_1.propertyInData(gen, data, prop, it.opts.ownProperties);
            cxt.setParams({
                property: prop,
                depsCount: deps.length,
                deps: deps.join(", "),
            });
            if (it.allErrors) {
                gen.if(hasProperty, function () {
                    for (var _i = 0; _i < deps.length; _i++) {
                        var depProp = deps[_i];
                        code_1.checkReportMissingProp(cxt, depProp);
                    }
                });
            }
            else {
                gen.if((_a = ["", " && (", ")"], _a.raw = ["", " && (", ")"], codegen_1._(_a, hasProperty, code_1.checkMissingProp(cxt, deps, missing))));
                code_1.reportMissingProp(cxt, missing);
                gen.else();
            }
        }
        var _a;
    }
    exports.validatePropertyDeps = validatePropertyDeps;
    function validateSchemaDeps(cxt, schemaDeps) {
        if (schemaDeps === void 0) { schemaDeps = cxt.schema; }
        var gen = cxt.gen, data = cxt.data, keyword = cxt.keyword, it = cxt.it;
        var valid = gen.name("valid");
        for (var prop in schemaDeps) {
            if (util_1.alwaysValidSchema(it, schemaDeps[prop], as, AnySchema))
                continue;
            gen.if(code_1.propertyInData(gen, data, prop, it.opts.ownProperties), function () {
                var schCxt = cxt.subschema({ keyword: keyword, schemaProp: prop }, valid);
                cxt.mergeValidEvaluated(schCxt, valid);
            }, function () { return gen.var(valid, true); } // TODO var
             // TODO var
            );
            cxt.ok(valid);
        }
    }
    exports.validateSchemaDeps = validateSchemaDeps;
    exports.default = def;
    var _a;
});
