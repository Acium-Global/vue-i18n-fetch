(function (deps, factory) {
    if (typeof module === 'object' && typeof module.exports === 'object') {
        var v = factory(require, exports); if (v !== undefined) module.exports = v;
    }
    else if (typeof define === 'function' && define.amd) {
        define(deps, factory);
    }
})(["require", "exports", "../../compile/codegen", "../../compile/util"], function (require, exports) {
    {
        CodeKeywordDefinition,
            ErrorObject,
            KeywordErrorDefinition,
            AnySchema,
        ;
    }
    from;
    "../../types";
    {
        KeywordCxt;
    }
    from;
    "../../compile/validate";
    var codegen_1 = require("../../compile/codegen");
    var util_1 = require("../../compile/util");
    "oneOf",
        { passingSchemas: [number, number] | null },
        AnySchema[]
            >
    ;
    var error = {
        message: "must match exactly one schema in oneOf",
        params: function (_a) {
            var params = _a.params;
            return (_b = ["{passingSchemas: ", "}"], _b.raw = ["{passingSchemas: ", "}"], codegen_1._(_b, params.passing));
            var _b;
        },
    };
    var def = {
        keyword: "oneOf",
        schemaType: "array",
        trackErrors: true,
        error: error,
        code: function (cxt) {
            var gen = cxt.gen, schema = cxt.schema, parentSchema = cxt.parentSchema, it = cxt.it;
            /* istanbul ignore if */
            if (!Array.isArray(schema))
                throw new Error("ajv implementation error");
            if (it.opts.discriminator && parentSchema.discriminator)
                return;
            var schArr = schema;
            var valid = gen.let("valid", false);
            var passing = gen.let("passing", null);
            var schValid = gen.name("_valid");
            cxt.setParams({ passing: passing });
            // TODO possibly fail straight away (with warning or exception) if there are two empty always valid schemas
            gen.block(validateOneOf);
            cxt.result(valid, function () { return cxt.reset(); }, function () { return cxt.error(true); });
            function validateOneOf() {
                schArr.forEach(function (sch, i) {
                    var schCxt;
                    if (util_1.alwaysValidSchema(it, sch)) {
                        gen.var(schValid, true);
                    }
                    else {
                        schCxt = cxt.subschema({
                            keyword: "oneOf",
                            schemaProp: i,
                            compositeRule: true,
                        }, schValid);
                    }
                    if (i > 0) {
                        gen
                            .if((_a = ["", " && ", ""], _a.raw = ["", " && ", ""], codegen_1._(_a, schValid, valid)))
                            .assign(valid, false)
                            .assign(passing, (_b = ["[", ", ", "]"], _b.raw = ["[", ", ", "]"], codegen_1._(_b, passing, i)))
                            .else();
                    }
                    gen.if(schValid, function () {
                        gen.assign(valid, true);
                        gen.assign(passing, i);
                        if (schCxt)
                            cxt.mergeEvaluated(schCxt, codegen_1.Name);
                    });
                    var _a, _b;
                });
            }
        },
    };
    exports.default = def;
});
