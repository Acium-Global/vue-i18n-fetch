(function (deps, factory) {
    if (typeof module === 'object' && typeof module.exports === 'object') {
        var v = factory(require, exports); if (v !== undefined) module.exports = v;
    }
    else if (typeof define === 'function' && define.amd) {
        define(deps, factory);
    }
})(["require", "exports", "../../compile/codegen", "../../compile/util"], function (require, exports) {
    {
        CodeKeywordDefinition,
            ErrorObject,
            KeywordErrorDefinition,
            AnySchema,
        ;
    }
    from;
    "../../types";
    {
        KeywordCxt;
    }
    from;
    "../../compile/validate";
    var codegen_1 = require("../../compile/codegen");
    var util_1 = require("../../compile/util");
    "propertyNames", { propertyName: string }, AnySchema >
    ;
    var error = {
        message: "property name must be valid",
        params: function (_a) {
            var params = _a.params;
            return (_b = ["{propertyName: ", "}"], _b.raw = ["{propertyName: ", "}"], codegen_1._(_b, params.propertyName));
            var _b;
        },
    };
    var def = {
        keyword: "propertyNames",
        type: "object",
        schemaType: ["object", "boolean"],
        error: error,
        code: function (cxt) {
            var gen = cxt.gen, schema = cxt.schema, data = cxt.data, it = cxt.it;
            if (util_1.alwaysValidSchema(it, schema))
                return;
            var valid = gen.name("valid");
            gen.forIn("key", data, function (key) {
                cxt.setParams({ propertyName: key });
                cxt.subschema({
                    keyword: "propertyNames",
                    data: key,
                    dataTypes: ["string"],
                    propertyName: key,
                    compositeRule: true,
                }, valid);
                gen.if(codegen_1.not(valid), function () {
                    cxt.error(true);
                    if (!it.allErrors)
                        gen.break();
                });
            });
            cxt.ok(valid);
        },
    };
    exports.default = def;
});
