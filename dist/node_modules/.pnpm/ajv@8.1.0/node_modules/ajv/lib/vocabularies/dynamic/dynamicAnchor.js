(function (deps, factory) {
    if (typeof module === 'object' && typeof module.exports === 'object') {
        var v = factory(require, exports); if (v !== undefined) module.exports = v;
    }
    else if (typeof define === 'function' && define.amd) {
        define(deps, factory);
    }
})(["require", "exports", "../../compile/codegen", "../../compile/names", "../../compile", "../core/ref"], function (require, exports) {
    {
        CodeKeywordDefinition;
    }
    from;
    "../../types";
    {
        KeywordCxt;
    }
    from;
    "../../compile/validate";
    var codegen_1 = require("../../compile/codegen");
    var names_1 = require("../../compile/names");
    var compile_1 = require("../../compile");
    var ref_1 = require("../core/ref");
    var def = {
        keyword: "$dynamicAnchor",
        schemaType: "string",
        code: function (cxt) { return dynamicAnchor(cxt, cxt.schema); },
    };
    function dynamicAnchor(cxt, anchor) {
        var gen = cxt.gen, it = cxt.it;
        it.schemaEnv.root.dynamicAnchors[anchor] = true;
        var v = (_a = ["", "", ""], _a.raw = ["", "", ""], codegen_1._(_a, names_1.default.dynamicAnchors, codegen_1.getProperty(anchor)));
        var validate = it.errSchemaPath === "#" ? it.validateName : _getValidate(cxt);
        gen.if((_b = ["!", ""], _b.raw = ["!", ""], codegen_1._(_b, v)), function () { return gen.assign(v, validate); });
        var _a, _b;
    }
    exports.dynamicAnchor = dynamicAnchor;
    function _getValidate(cxt) {
        var _a = cxt.it, schemaEnv = _a.schemaEnv, schema = _a.schema, self = _a.self;
        var _b = schemaEnv.root, root = _b.root, baseId = _b.baseId, localRefs = _b.localRefs, meta = _b.meta;
        var sch = new compile_1.SchemaEnv({ schema: schema, root: root, baseId: baseId, localRefs: localRefs, meta: meta });
        compile_1.compileSchema.call(self, sch);
        return ref_1.getValidate(cxt, sch);
    }
    exports.default = def;
});
