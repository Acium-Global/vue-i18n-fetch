(function (deps, factory) {
    if (typeof module === 'object' && typeof module.exports === 'object') {
        var v = factory(require, exports); if (v !== undefined) module.exports = v;
    }
    else if (typeof define === 'function' && define.amd) {
        define(deps, factory);
    }
})(["require", "exports", "../../compile/util", "../code", "../../compile/codegen", "./metadata", "./nullable", "./error"], function (require, exports) {
    {
        CodeKeywordDefinition, SchemaObject;
    }
    from;
    "../../types";
    {
        KeywordCxt;
    }
    from;
    "../../compile/validate";
    var util_1 = require("../../compile/util");
    var code_1 = require("../code");
    var codegen_1 = require("../../compile/codegen");
    var metadata_1 = require("./metadata");
    var nullable_1 = require("./nullable");
    var error_1 = require("./error");
    "elements", "array", SchemaObject >
    ;
    var def = {
        keyword: "elements",
        schemaType: "object",
        error: error_1.typeError("array"),
        code: function (cxt) {
            metadata_1.checkMetadata(cxt);
            var gen = cxt.gen, data = cxt.data, schema = cxt.schema, it = cxt.it;
            if (util_1.alwaysValidSchema(it, schema))
                return;
            var valid = nullable_1.checkNullable(cxt)[0];
            gen.if(codegen_1.not(valid), function () {
                return gen.if((_a = ["Array.isArray(", ")"], _a.raw = ["Array.isArray(", ")"], codegen_1._(_a, data)), function () { return gen.assign(valid, code_1.validateArray(cxt)); }, function () { return cxt.error(); });
                var _a;
            });
            cxt.ok(valid);
        },
    };
    exports.default = def;
});
