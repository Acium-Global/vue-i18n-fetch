(function (deps, factory) {
    if (typeof module === 'object' && typeof module.exports === 'object') {
        var v = factory(require, exports); if (v !== undefined) module.exports = v;
    }
    else if (typeof define === 'function' && define.amd) {
        define(deps, factory);
    }
})(["require", "exports", "../../compile/codegen", "./metadata", "./nullable"], function (require, exports) {
    {
        CodeKeywordDefinition, KeywordErrorDefinition, ErrorObject;
    }
    from;
    "../../types";
    {
        KeywordCxt;
    }
    from;
    "../../compile/validate";
    var codegen_1 = require("../../compile/codegen");
    var metadata_1 = require("./metadata");
    var nullable_1 = require("./nullable");
    "enum", { allowedValues: string[] }, string[] >
    ;
    var error = {
        message: "must be equal to one of the allowed values",
        params: function (_a) {
            var schemaCode = _a.schemaCode;
            return (_b = ["{allowedValues: ", "}"], _b.raw = ["{allowedValues: ", "}"], codegen_1._(_b, schemaCode));
            var _b;
        },
    };
    var def = {
        keyword: "enum",
        schemaType: "array",
        error: error,
        code: function (cxt) {
            metadata_1.checkMetadata(cxt);
            var gen = cxt.gen, data = cxt.data, schema = cxt.schema, schemaValue = cxt.schemaValue, parentSchema = cxt.parentSchema, it = cxt.it;
            if (schema.length === 0)
                throw new Error("enum must have non-empty array");
            if (schema.length !== new Set(schema).size)
                throw new Error("enum items must be unique");
            var valid;
            var isString = (_a = ["typeof ", " == \"string\""], _a.raw = ["typeof ", " == \"string\""], codegen_1._(_a, data));
            if (schema.length >= it.opts.loopEnum) {
                var cond;
                _b = nullable_1.checkNullable(cxt, isString), valid = _b[0], cond = _b[1];
                gen.if(cond, loopEnum);
            }
            else {
                /* istanbul ignore if */
                if (!Array.isArray(schema))
                    throw new Error("ajv implementation error");
                valid = codegen_1.and(isString, codegen_1.or.apply(void 0, schema.map(function (value) { return (_a = ["", " === ", ""], _a.raw = ["", " === ", ""], codegen_1._(_a, data, value)); var _a; })));
                if (parentSchema.nullable)
                    valid = codegen_1.or((_c = ["", " === null"], _c.raw = ["", " === null"], codegen_1._(_c, data)), valid);
            }
            cxt.pass(valid);
            function loopEnum() {
                gen.forOf("v", schemaValue, as, codegen_1.Code, function (v) {
                    return gen.if((_a = ["", " = ", " === ", ""], _a.raw = ["", " = ", " === ", ""], codegen_1._(_a, valid, data, v)), function () { return gen.break(); });
                    var _a;
                });
            }
            var _a, _b, _c;
        },
    };
    exports.default = def;
});
