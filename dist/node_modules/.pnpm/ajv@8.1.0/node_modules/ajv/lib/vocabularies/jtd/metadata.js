(function (deps, factory) {
    if (typeof module === 'object' && typeof module.exports === 'object') {
        var v = factory(require, exports); if (v !== undefined) module.exports = v;
    }
    else if (typeof define === 'function' && define.amd) {
        define(deps, factory);
    }
})(["require", "exports", "../../compile/util"], function (require, exports) {
    {
        CodeKeywordDefinition;
    }
    from;
    "../../types";
    var util_1 = require("../../compile/util");
    var def = {
        keyword: "metadata",
        schemaType: "object",
        code: function (cxt) {
            checkMetadata(cxt);
            var gen = cxt.gen, schema = cxt.schema, it = cxt.it;
            if (util_1.alwaysValidSchema(it, schema))
                return;
            var valid = gen.name("valid");
            cxt.subschema({ keyword: "metadata", jtdMetadata: true }, valid);
            cxt.ok(valid);
        },
    };
    function checkMetadata(_a, metadata) {
        var it = _a.it, keyword = _a.keyword;
        if (it.jtdMetadata !== metadata) {
            throw new Error("JTD: \"" + keyword + "\" cannot be used in this schema location");
        }
    }
    exports.checkMetadata = checkMetadata;
    exports.default = def;
});
