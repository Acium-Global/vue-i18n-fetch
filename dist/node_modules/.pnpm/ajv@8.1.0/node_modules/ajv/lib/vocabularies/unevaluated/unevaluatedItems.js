(function (deps, factory) {
    if (typeof module === 'object' && typeof module.exports === 'object') {
        var v = factory(require, exports); if (v !== undefined) module.exports = v;
    }
    else if (typeof define === 'function' && define.amd) {
        define(deps, factory);
    }
})(["require", "exports", "../../compile/codegen", "../../compile/util"], function (require, exports) {
    {
        CodeKeywordDefinition,
            ErrorObject,
            KeywordErrorDefinition,
            AnySchema,
        ;
    }
    from;
    "../../types";
    {
        KeywordCxt;
    }
    from;
    "../../compile/validate";
    var codegen_1 = require("../../compile/codegen");
    var util_1 = require("../../compile/util");
    "unevaluatedItems", { limit: number }, AnySchema >
    ;
    var error = {
        message: function (_a) {
            var len = _a.params.len;
            return (_b = ["must NOT have more than ", " items"], _b.raw = ["must NOT have more than ", " items"], codegen_1.str(_b, len));
            var _b;
        },
        params: function (_a) {
            var len = _a.params.len;
            return (_b = ["{limit: ", "}"], _b.raw = ["{limit: ", "}"], codegen_1._(_b, len));
            var _b;
        },
    };
    var def = {
        keyword: "unevaluatedItems",
        type: "array",
        schemaType: ["boolean", "object"],
        error: error,
        code: function (cxt) {
            var gen = cxt.gen, schema = cxt.schema, data = cxt.data, it = cxt.it;
            var items = it.items || 0;
            if (items === true)
                return;
            var len = gen.const("len", (_a = ["", ".length"], _a.raw = ["", ".length"], codegen_1._(_a, data)));
            if (schema === false) {
                cxt.setParams({ len: items });
                cxt.fail((_b = ["", " > ", ""], _b.raw = ["", " > ", ""], codegen_1._(_b, len, items)));
            }
            else if (typeof schema == "object" && !util_1.alwaysValidSchema(it, schema)) {
                var valid = gen.var("valid", (_c = ["", " <= ", ""], _c.raw = ["", " <= ", ""], codegen_1._(_c, len, items)));
                gen.if(codegen_1.not(valid), function () { return validateItems(valid, items); });
                cxt.ok(valid);
            }
            it.items = true;
            function validateItems(valid, from) {
                gen.forRange("i", from, len, function (i) {
                    cxt.subschema({ keyword: "unevaluatedItems", dataProp: i, dataPropType: util_1.Type.Num }, valid);
                    if (!it.allErrors)
                        gen.if(codegen_1.not(valid), function () { return gen.break(); });
                });
            }
            var _a, _b, _c;
        },
    };
    exports.default = def;
});
