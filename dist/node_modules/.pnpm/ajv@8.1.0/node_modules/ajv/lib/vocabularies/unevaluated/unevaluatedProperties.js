(function (deps, factory) {
    if (typeof module === 'object' && typeof module.exports === 'object') {
        var v = factory(require, exports); if (v !== undefined) module.exports = v;
    }
    else if (typeof define === 'function' && define.amd) {
        define(deps, factory);
    }
})(["require", "exports", "../../compile/codegen", "../../compile/util", "../../compile/names"], function (require, exports) {
    {
        CodeKeywordDefinition,
            KeywordErrorDefinition,
            ErrorObject,
            AnySchema,
        ;
    }
    from;
    "../../types";
    var codegen_1 = require("../../compile/codegen");
    var util_1 = require("../../compile/util");
    var names_1 = require("../../compile/names");
    "unevaluatedProperties",
        { unevaluatedProperty: string },
        AnySchema
            >
    ;
    var error = {
        message: "must NOT have unevaluated properties",
        params: function (_a) {
            var params = _a.params;
            return (_b = ["{unevaluatedProperty: ", "}"], _b.raw = ["{unevaluatedProperty: ", "}"], codegen_1._(_b, params.unevaluatedProperty));
            var _b;
        },
    };
    var def = {
        keyword: "unevaluatedProperties",
        type: "object",
        schemaType: ["boolean", "object"],
        trackErrors: true,
        error: error,
        code: function (cxt) {
            var gen = cxt.gen, schema = cxt.schema, data = cxt.data, errsCount = cxt.errsCount, it = cxt.it;
            /* istanbul ignore if */
            if (!errsCount)
                throw new Error("ajv implementation error");
            var allErrors = it.allErrors, props = it.props;
            if (props instanceof codegen_1.Name) {
                gen.if((_a = ["", " !== true"], _a.raw = ["", " !== true"], codegen_1._(_a, props)), function () {
                    return gen.forIn("key", data, function (key) {
                        return gen.if(unevaluatedDynamic(props, key), function () { return unevaluatedPropCode(key); });
                    });
                });
            }
            else if (props !== true) {
                gen.forIn("key", data, function (key) {
                    return props === undefined
                        ? unevaluatedPropCode(key)
                        : gen.if(unevaluatedStatic(props, key), function () { return unevaluatedPropCode(key); });
                });
            }
            it.props = true;
            cxt.ok((_b = ["", " === ", ""], _b.raw = ["", " === ", ""], codegen_1._(_b, errsCount, names_1.default.errors)));
            function unevaluatedPropCode(key) {
                if (schema === false) {
                    cxt.setParams({ unevaluatedProperty: key });
                    cxt.error();
                    if (!allErrors)
                        gen.break();
                    return;
                }
                if (!util_1.alwaysValidSchema(it, schema)) {
                    var valid = gen.name("valid");
                    cxt.subschema({
                        keyword: "unevaluatedProperties",
                        dataProp: key,
                        dataPropType: util_1.Type.Str,
                    }, valid);
                    if (!allErrors)
                        gen.if(codegen_1.not(valid), function () { return gen.break(); });
                }
            }
            function unevaluatedDynamic(evaluatedProps, key) {
                return (_a = ["!", " || !", "[", "]"], _a.raw = ["!", " || !", "[", "]"], codegen_1._(_a, evaluatedProps, evaluatedProps, key));
                var _a;
            }
            function unevaluatedStatic(evaluatedProps, key) {
                var ps = [];
                for (var p in evaluatedProps) {
                    if (evaluatedProps[p] === true)
                        ps.push((_a = ["", " !== ", ""], _a.raw = ["", " !== ", ""], codegen_1._(_a, key, p)));
                }
                return codegen_1.and.apply(void 0, ps);
                var _a;
            }
            var _a, _b;
        },
    };
    exports.default = def;
});
