(function (deps, factory) {
    if (typeof module === 'object' && typeof module.exports === 'object') {
        var v = factory(require, exports); if (v !== undefined) module.exports = v;
    }
    else if (typeof define === 'function' && define.amd) {
        define(deps, factory);
    }
})(["require", "exports", "../../compile/codegen", "../../compile/util", "../../runtime/equal"], function (require, exports) {
    {
        CodeKeywordDefinition, ErrorObject, KeywordErrorDefinition;
    }
    from;
    "../../types";
    {
        KeywordCxt;
    }
    from;
    "../../compile/validate";
    var codegen_1 = require("../../compile/codegen");
    var util_1 = require("../../compile/util");
    var equal_1 = require("../../runtime/equal");
    "const", { allowedValue: any } >
    ;
    var error = {
        message: "must be equal to constant",
        params: function (_a) {
            var schemaCode = _a.schemaCode;
            return (_b = ["{allowedValue: ", "}"], _b.raw = ["{allowedValue: ", "}"], codegen_1._(_b, schemaCode));
            var _b;
        },
    };
    var def = {
        keyword: "const",
        $data: true,
        error: error,
        code: function (cxt) {
            var gen = cxt.gen, data = cxt.data, schemaCode = cxt.schemaCode;
            // TODO optimize for scalar values in schema
            cxt.fail$data((_a = ["!", "(", ", ", ")"], _a.raw = ["!", "(", ", ", ")"], codegen_1._(_a, util_1.useFunc(gen, equal_1.default), data, schemaCode)));
            var _a;
        },
    };
    exports.default = def;
});
