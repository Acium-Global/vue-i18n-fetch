(function (deps, factory) {
    if (typeof module === 'object' && typeof module.exports === 'object') {
        var v = factory(require, exports); if (v !== undefined) module.exports = v;
    }
    else if (typeof define === 'function' && define.amd) {
        define(deps, factory);
    }
})(["require", "exports", "../../compile/codegen", "../../compile/util", "../../runtime/ucs2length"], function (require, exports) {
    {
        CodeKeywordDefinition, KeywordErrorDefinition;
    }
    from;
    "../../types";
    {
        KeywordCxt;
    }
    from;
    "../../compile/validate";
    var codegen_1 = require("../../compile/codegen");
    var util_1 = require("../../compile/util");
    var ucs2length_1 = require("../../runtime/ucs2length");
    var error = {
        message: function (_a) {
            var keyword = _a.keyword, schemaCode = _a.schemaCode;
            var comp = keyword === "maxLength" ? "more" : "fewer";
            return (_b = ["must NOT have ", " than ", " characters"], _b.raw = ["must NOT have ", " than ", " characters"], codegen_1.str(_b, comp, schemaCode));
            var _b;
        },
        params: function (_a) {
            var schemaCode = _a.schemaCode;
            return (_b = ["{limit: ", "}"], _b.raw = ["{limit: ", "}"], codegen_1._(_b, schemaCode));
            var _b;
        },
    };
    var def = {
        keyword: ["maxLength", "minLength"],
        type: "string",
        schemaType: "number",
        $data: true,
        error: error,
        code: function (cxt) {
            var keyword = cxt.keyword, data = cxt.data, schemaCode = cxt.schemaCode, it = cxt.it;
            var op = keyword === "maxLength" ? codegen_1.operators.GT : codegen_1.operators.LT;
            var len = it.opts.unicode === false ? (_a = ["", ".length"], _a.raw = ["", ".length"], codegen_1._(_a, data)) : (_b = ["", "(", ")"], _b.raw = ["", "(", ")"], codegen_1._(_b, util_1.useFunc(cxt.gen, ucs2length_1.default), data));
            cxt.fail$data((_c = ["", " ", " ", ""], _c.raw = ["", " ", " ", ""], codegen_1._(_c, len, op, schemaCode)));
            var _a, _b, _c;
        },
    };
    exports.default = def;
});
