var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
(function (deps, factory) {
    if (typeof module === 'object' && typeof module.exports === 'object') {
        var v = factory(require, exports); if (v !== undefined) module.exports = v;
    }
    else if (typeof define === 'function' && define.amd) {
        define(deps, factory);
    }
})(["require", "exports", "./core", "./vocabularies/draft7", "./vocabularies/discriminator", "./refs/json-schema-draft-07.json"], function (require, exports) {
    {
        AnySchemaObject;
    }
    from;
    "./types";
    var core_1 = require("./core");
    var draft7_1 = require("./vocabularies/draft7");
    var discriminator_1 = require("./vocabularies/discriminator");
    var draft7MetaSchema = require("./refs/json-schema-draft-07.json");
    var META_SUPPORT_DATA = ["/properties"];
    var META_SCHEMA_ID = "http://json-schema.org/draft-07/schema";
    var Ajv = (function (_super) {
        __extends(Ajv, _super);
        function Ajv() {
            _super.apply(this, arguments);
        }
        Ajv.prototype._addVocabularies = function () {
            var _this = this;
            _super.prototype._addVocabularies.call(this);
            draft7_1.default.forEach(function (v) { return _this.addVocabulary(v); });
            if (this.opts.discriminator)
                this.addKeyword(discriminator_1.default);
        };
        Ajv.prototype._addDefaultMetaSchema = function () {
            _super.prototype._addDefaultMetaSchema.call(this);
            if (!this.opts.meta)
                return;
            var metaSchema = this.opts.$data
                ? this.$dataMetaSchema(draft7MetaSchema, META_SUPPORT_DATA)
                : draft7MetaSchema;
            this.addMetaSchema(metaSchema, META_SCHEMA_ID, false);
            this.refs["http://json-schema.org/schema"] = META_SCHEMA_ID;
        };
        Ajv.prototype.defaultMeta = function () {
            return (this.opts.defaultMeta =
                _super.prototype.defaultMeta.call(this) || (this.getSchema(META_SCHEMA_ID) ? META_SCHEMA_ID : undefined));
        };
        return Ajv;
    })(core_1.default);
    module.exports = exports = Ajv;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Ajv;
});
