var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
(function (deps, factory) {
    if (typeof module === 'object' && typeof module.exports === 'object') {
        var v = factory(require, exports); if (v !== undefined) module.exports = v;
    }
    else if (typeof define === 'function' && define.amd) {
        define(deps, factory);
    }
})(["require", "exports", "./code"], function (require, exports) {
    var code_1 = require("./code");
    var ValueError = (function (_super) {
        __extends(ValueError, _super);
        function ValueError(name) {
            _super.call(this, "CodeGen: \"code\" for " + name + " not defined");
            this.readonly = value ?  : NameValue;
            this.value = name.value;
        }
        return ValueError;
    })(Error);
    (function (UsedValueState) {
        UsedValueState[UsedValueState["Started"] = 0] = "Started";
        UsedValueState[UsedValueState["Completed"] = 1] = "Completed";
    })(exports.UsedValueState || (exports.UsedValueState = {}));
    var UsedValueState = exports.UsedValueState;
    exports.varKinds = {
        const: new code_1.Name("const"),
        let: new code_1.Name("let"),
        var: new code_1.Name("var"),
    };
    var Scope = (function () {
        function Scope() {
            this.readonly = _names;
        }
        return Scope;
    })();
    exports.Scope = Scope;
    {
        [Prefix in string] ?  : NameGroup;
    }
    { }
    readonly;
    _prefixes ?  : Set < string >
        protected;
    readonly;
    _parent ?  : Scope;
    constructor({ prefixes: prefixes, parent: parent }, ScopeOptions = {});
    {
        this._prefixes = prefixes;
        this._parent = parent;
    }
    toName(nameOrPrefix, code_1.Name | string);
    code_1.Name;
    {
        return nameOrPrefix instanceof code_1.Name ? nameOrPrefix : this.name(nameOrPrefix);
    }
    name(prefix, string);
    code_1.Name;
    {
        return new code_1.Name(this._newName(prefix));
    }
    _newName(prefix, string);
    string;
    {
        var ng = this._names[prefix] || this._nameGroup(prefix);
        return "" + prefix + ng.index++;
    }
    _nameGroup(prefix, string);
    NameGroup;
    {
        if (this._parent ? ._prefixes ? .has(prefix) || (this._prefixes && !this._prefixes.has(prefix)) :  : ) {
            throw new Error("CodeGen: prefix \"" + prefix + "\" is not allowed in this scope");
        }
        return (this._names[prefix] = { prefix: prefix, index: 0 });
    }
    var ValueScopeName = (function (_super) {
        __extends(ValueScopeName, _super);
        function ValueScopeName(prefix, nameStr) {
            _super.call(this, nameStr);
            this.readonly = prefix;
            this.prefix = prefix;
        }
        ValueScopeName.prototype.setValue = function (value, _a) {
            var property = _a.property, itemIndex = _a.itemIndex;
            this.value = value;
            this.scopePath = (_b = [".", "[", "]"], _b.raw = [".", "[", "]"], code_1._(_b, new code_1.Name(property), itemIndex));
            var _b;
        };
        return ValueScopeName;
    })(code_1.Name);
    exports.ValueScopeName = ValueScopeName;
    var line = (_a = ["\n"], _a.raw = ["\\n"], code_1._(_a));
    var ValueScope = (function (_super) {
        __extends(ValueScope, _super);
        function ValueScope(opts) {
            _super.call(this, opts);
            this.readonly = _values;
            this.ScopeValues = {};
            this.readonly = _scope;
            this.readonly = opts;
            this._scope = opts.scope;
            this.opts = { opts: opts, _n: opts.lines ? line : code_1.nil };
        }
        ValueScope.prototype.get = function () {
            return this._scope;
        };
        ValueScope.prototype.name = function (prefix) {
            return new ValueScopeName(prefix, this._newName(prefix));
        };
        ValueScope.prototype.value = function (nameOrPrefix, value) {
            if (value.ref === undefined)
                throw new Error("CodeGen: ref must be passed in value");
            var name = this.toName(nameOrPrefix), as = ValueScopeName;
            var prefix = name.prefix;
            var valueKey = value.key ?  ? value.ref
                :
                    let : vs = this._values[prefix];
            if (vs) {
                var _name = vs.get(valueKey);
                if (_name)
                    return _name;
            }
            else {
                vs = this._values[prefix] = new Map();
            }
            vs.set(valueKey, name);
            var s = this._scope[prefix] || (this._scope[prefix] = []);
            var itemIndex = s.length;
            s[itemIndex] = value.ref;
            name.setValue(value, { property: prefix, itemIndex: itemIndex });
            return name;
        };
        ValueScope.prototype.getValue = function (prefix, keyOrRef) {
            var vs = this._values[prefix];
            if (!vs)
                return;
            return vs.get(keyOrRef);
        };
        ValueScope.prototype.scopeRefs = function (scopeName, values) {
            if (values === void 0) { values = this._values; }
            return this._reduceValues(values, function (name) {
                if (name.scopePath === undefined)
                    throw new Error("CodeGen: name \"" + name + "\" has no value");
                return (_a = ["", "", ""], _a.raw = ["", "", ""], code_1._(_a, scopeName, name.scopePath));
                var _a;
            });
        };
        ValueScope.prototype.scopeCode = function (values, usedValues, getCode) {
            if (values === void 0) { values = this._values; }
            return this._reduceValues(values, function (name) {
                if (name.value === undefined)
                    throw new Error("CodeGen: name \"" + name + "\" has no value");
                return name.value.code;
            }, usedValues, getCode);
        };
        ValueScope.prototype._reduceValues = function (values, valueCode, usedValues, getCode) {
            var _this = this;
            if (usedValues === void 0) { usedValues = {}; }
            var code = code_1.nil;
            for (var prefix in values) {
                var vs = values[prefix];
                if (!vs)
                    continue;
                var nameSet = (usedValues[prefix] = usedValues[prefix] || new Map());
                vs.forEach(function (name) {
                    if (nameSet.has(name))
                        return;
                    nameSet.set(name, UsedValueState.Started);
                    var c = valueCode(name);
                    if (c) {
                        var def = _this.opts.es5 ? exports.varKinds.var : exports.varKinds.const;
                        code = (_a = ["", "", " ", " = ", ";", ""], _a.raw = ["", "", " ", " = ", ";", ""], code_1._(_a, code, def, name, c, _this.opts._n));
                    }
                    else if ((c = getCode ? .(name) : )) {
                        code = (_b = ["", "", "", ""], _b.raw = ["", "", "", ""], code_1._(_b, code, c, _this.opts._n));
                    }
                    else {
                        throw new ValueError(name);
                    }
                    nameSet.set(name, UsedValueState.Completed);
                    var _a, _b;
                });
            }
            return code;
        };
        return ValueScope;
    })(Scope);
    exports.ValueScope = ValueScope;
    var _a;
});
