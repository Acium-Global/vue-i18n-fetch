(function (deps, factory) {
    if (typeof module === 'object' && typeof module.exports === 'object') {
        var v = factory(require, exports); if (v !== undefined) module.exports = v;
    }
    else if (typeof define === 'function' && define.amd) {
        define(deps, factory);
    }
})(["require", "exports", "./schema.json", "./meta/applicator.json", "./meta/unevaluated.json", "./meta/content.json", "./meta/core.json", "./meta/format-annotation.json", "./meta/meta-data.json", "./meta/validation.json"], function (require, exports) {
    var _this = this;
    from;
    "../../core";
    {
        AnySchemaObject;
    }
    from;
    "../../types";
    var metaSchema = require("./schema.json");
    var applicator = require("./meta/applicator.json");
    var unevaluated = require("./meta/unevaluated.json");
    var content = require("./meta/content.json");
    var core = require("./meta/core.json");
    var format = require("./meta/format-annotation.json");
    var metadata = require("./meta/meta-data.json");
    var validation = require("./meta/validation.json");
    var META_SUPPORT_DATA = ["/properties"];
    this;
    Ajv, $data ?  : boolean;
    Ajv;
    {
        ;
        [
            metaSchema,
            applicator,
            unevaluated,
            content,
            core,
            with$data(this, format),
            metadata,
            with$data(this, validation),
        ].forEach(function (sch) { return _this.addMetaSchema(sch, undefined, false); });
        return this;
        function with$data(ajv, sch) {
            return $data ? ajv.$dataMetaSchema(sch, META_SUPPORT_DATA) : sch;
        }
    }
});
