(function (deps, factory) {
    if (typeof module === 'object' && typeof module.exports === 'object') {
        var v = factory(require, exports); if (v !== undefined) module.exports = v;
    }
    else if (typeof define === 'function' && define.amd) {
        define(deps, factory);
    }
})(["require", "exports", "../../compile/codegen", "../../compile/util", "../code", "./additionalItems"], function (require, exports) {
    {
        CodeKeywordDefinition,
            KeywordErrorDefinition,
            ErrorObject,
            AnySchema,
        ;
    }
    from;
    "../../types";
    {
        KeywordCxt;
    }
    from;
    "../../compile/validate";
    var codegen_1 = require("../../compile/codegen");
    var util_1 = require("../../compile/util");
    var code_1 = require("../code");
    var additionalItems_1 = require("./additionalItems");
    "items", { limit: number }, AnySchema >
    ;
    var error = {
        message: function (_a) {
            var len = _a.params.len;
            return (_b = ["must NOT have more than ", " items"], _b.raw = ["must NOT have more than ", " items"], codegen_1.str(_b, len));
            var _b;
        },
        params: function (_a) {
            var len = _a.params.len;
            return (_b = ["{limit: ", "}"], _b.raw = ["{limit: ", "}"], codegen_1._(_b, len));
            var _b;
        },
    };
    var def = {
        keyword: "items",
        type: "array",
        schemaType: ["object", "boolean"],
        before: "uniqueItems",
        error: error,
        code: function (cxt) {
            var schema = cxt.schema, parentSchema = cxt.parentSchema, it = cxt.it;
            var prefixItems = parentSchema.prefixItems;
            it.items = true;
            if (util_1.alwaysValidSchema(it, schema))
                return;
            if (prefixItems)
                additionalItems_1.validateAdditionalItems(cxt, prefixItems);
            else
                cxt.ok(code_1.validateArray(cxt));
        },
    };
    exports.default = def;
});
