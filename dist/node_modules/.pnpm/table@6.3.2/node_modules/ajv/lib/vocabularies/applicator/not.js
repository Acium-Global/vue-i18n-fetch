(function (deps, factory) {
    if (typeof module === 'object' && typeof module.exports === 'object') {
        var v = factory(require, exports); if (v !== undefined) module.exports = v;
    }
    else if (typeof define === 'function' && define.amd) {
        define(deps, factory);
    }
})(["require", "exports", "../../compile/util"], function (require, exports) {
    {
        CodeKeywordDefinition, ErrorNoParams, AnySchema;
    }
    from;
    "../../types";
    {
        KeywordCxt;
    }
    from;
    "../../compile/validate";
    var util_1 = require("../../compile/util");
    "not", AnySchema >
    ;
    var def = {
        keyword: "not",
        schemaType: ["object", "boolean"],
        trackErrors: true,
        code: function (cxt) {
            var gen = cxt.gen, schema = cxt.schema, it = cxt.it;
            if (util_1.alwaysValidSchema(it, schema)) {
                cxt.fail();
                return;
            }
            var valid = gen.name("valid");
            cxt.subschema({
                keyword: "not",
                compositeRule: true,
                createErrors: false,
                allErrors: false,
            }, valid);
            cxt.result(valid, function () { return cxt.error(); }, function () { return cxt.reset(); });
        },
        error: { message: "must NOT be valid" },
    };
    exports.default = def;
});
