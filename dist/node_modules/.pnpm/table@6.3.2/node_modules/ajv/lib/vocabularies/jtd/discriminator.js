(function (deps, factory) {
    if (typeof module === 'object' && typeof module.exports === 'object') {
        var v = factory(require, exports); if (v !== undefined) module.exports = v;
    }
    else if (typeof define === 'function' && define.amd) {
        define(deps, factory);
    }
})(["require", "exports", "../../compile/codegen", "./metadata", "./nullable", "./error", "../discriminator/types"], function (require, exports) {
    {
        CodeKeywordDefinition, KeywordErrorDefinition;
    }
    from;
    "../../types";
    {
        KeywordCxt;
    }
    from;
    "../../compile/validate";
    var codegen_1 = require("../../compile/codegen");
    var metadata_1 = require("./metadata");
    var nullable_1 = require("./nullable");
    var error_1 = require("./error");
    var types_1 = require("../discriminator/types");
    "discriminator", "object", string >
        | DiscrErrorObj(
            | DiscrErrorObj < types_1.DiscrError.Mapping >
        );
    var error = {
        message: function (cxt) {
            var schema = cxt.schema, params = cxt.params;
            return params.discrError
                ? params.discrError === types_1.DiscrError.Tag
                    ? "tag \"" + schema + "\" must be string"
                    : "value of tag \"" + schema + "\" must be in mapping"
                : error_1.typeErrorMessage(cxt, "object");
        },
        params: function (cxt) {
            var schema = cxt.schema, params = cxt.params;
            return params.discrError
                ? (_a = ["{error: ", ", tag: ", ", tagValue: ", "}"], _a.raw = ["{error: ", ", tag: ", ", tagValue: ", "}"], codegen_1._(_a, params.discrError, schema, params.tag))
                : error_1.typeErrorParams(cxt, "object");
            var _a;
        },
    };
    var def = {
        keyword: "discriminator",
        schemaType: "string",
        implements: ["mapping"],
        error: error,
        code: function (cxt) {
            metadata_1.checkMetadata(cxt);
            var gen = cxt.gen, data = cxt.data, schema = cxt.schema, parentSchema = cxt.parentSchema;
            var _a = nullable_1.checkNullableObject(cxt, data), valid = _a[0], cond = _a[1];
            gen.if(cond);
            validateDiscriminator();
            gen.elseIf(codegen_1.not(valid));
            cxt.error();
            gen.endIf();
            cxt.ok(valid);
            function validateDiscriminator() {
                var tag = gen.const("tag", (_a = ["", "", ""], _a.raw = ["", "", ""], codegen_1._(_a, data, codegen_1.getProperty(schema))));
                gen.if((_b = ["", " === undefined"], _b.raw = ["", " === undefined"], codegen_1._(_b, tag)));
                cxt.error(false, { discrError: types_1.DiscrError.Tag, tag: tag });
                gen.elseIf((_c = ["typeof ", " == \"string\""], _c.raw = ["typeof ", " == \"string\""], codegen_1._(_c, tag)));
                validateMapping(tag);
                gen.else();
                cxt.error(false, { discrError: types_1.DiscrError.Tag, tag: tag }, { instancePath: schema });
                gen.endIf();
                var _a, _b, _c;
            }
            function validateMapping(tag) {
                gen.if(false);
                for (var tagValue in parentSchema.mapping) {
                    gen.elseIf((_a = ["", " === ", ""], _a.raw = ["", " === ", ""], codegen_1._(_a, tag, tagValue)));
                    gen.assign(valid, applyTagSchema(tagValue));
                }
                gen.else();
                cxt.error(false, { discrError: types_1.DiscrError.Mapping, tag: tag }, { instancePath: schema, schemaPath: "mapping", parentSchema: true });
                gen.endIf();
                var _a;
            }
            function applyTagSchema(schemaProp) {
                var _valid = gen.name("valid");
                cxt.subschema({
                    keyword: "mapping",
                    schemaProp: schemaProp,
                    jtdDiscriminator: schema,
                }, _valid);
                return _valid;
            }
        },
    };
    exports.default = def;
});
