(function (deps, factory) {
    if (typeof module === 'object' && typeof module.exports === 'object') {
        var v = factory(require, exports); if (v !== undefined) module.exports = v;
    }
    else if (typeof define === 'function' && define.amd) {
        define(deps, factory);
    }
})(["require", "exports", "../../compile/codegen"], function (require, exports) {
    {
        KeywordErrorDefinition, KeywordErrorCxt, ErrorObject;
    }
    from;
    "../../types";
    var codegen_1 = require("../../compile/codegen");
    function typeError(t) {
        return {
            message: function (cxt) { return typeErrorMessage(cxt, t); },
            params: function (cxt) { return typeErrorParams(cxt, t); },
        };
    }
    exports.typeError = typeError;
    function typeErrorMessage(_a, t) {
        var parentSchema = _a.parentSchema;
        return parentSchema ? .nullable ? "must be " + t + " or null" : "must be " + t
            :
        ;
    }
    exports.typeErrorMessage = typeErrorMessage;
    function typeErrorParams(_a, t) {
        var parentSchema = _a.parentSchema;
        return (_b = ["{type: ", ", nullable: ", "}"], _b.raw = ["{type: ", ", nullable: ", "}"], codegen_1._(_b, t, !!parentSchema ? .nullable : ));
        var _b;
    }
    exports.typeErrorParams = typeErrorParams;
});
