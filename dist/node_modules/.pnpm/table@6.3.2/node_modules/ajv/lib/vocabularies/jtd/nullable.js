(function (deps, factory) {
    if (typeof module === 'object' && typeof module.exports === 'object') {
        var v = factory(require, exports); if (v !== undefined) module.exports = v;
    }
    else if (typeof define === 'function' && define.amd) {
        define(deps, factory);
    }
})(["require", "exports", "../../compile/codegen"], function (require, exports) {
    {
        KeywordCxt;
    }
    from;
    "../../compile/validate";
    var codegen_1 = require("../../compile/codegen");
    function checkNullable(_a, cond) {
        var gen = _a.gen, data = _a.data, parentSchema = _a.parentSchema;
        if (cond === void 0) { cond = codegen_1.nil; }
        var valid = gen.name("valid");
        if (parentSchema.nullable) {
            gen.let(valid, (_b = ["", " === null"], _b.raw = ["", " === null"], codegen_1._(_b, data)));
            cond = codegen_1.not(valid);
        }
        else {
            gen.let(valid, false);
        }
        return [valid, cond];
        var _b;
    }
    exports.checkNullable = checkNullable;
    function checkNullableObject(cxt, cond) {
        var _a = checkNullable(cxt, cond), valid = _a[0], cond_ = _a[1];
        return [valid, (_b = ["", " && typeof ", " == \"object\" && !Array.isArray(", ")"], _b.raw = ["", " && typeof ", " == \"object\" && !Array.isArray(", ")"], codegen_1._(_b, cond_, cxt.data, cxt.data))];
        var _b;
    }
    exports.checkNullableObject = checkNullableObject;
});
