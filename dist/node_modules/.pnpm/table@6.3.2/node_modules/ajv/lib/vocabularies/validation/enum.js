(function (deps, factory) {
    if (typeof module === 'object' && typeof module.exports === 'object') {
        var v = factory(require, exports); if (v !== undefined) module.exports = v;
    }
    else if (typeof define === 'function' && define.amd) {
        define(deps, factory);
    }
})(["require", "exports", "../../compile/codegen", "../../compile/util", "../../runtime/equal"], function (require, exports) {
    {
        CodeKeywordDefinition, ErrorObject, KeywordErrorDefinition;
    }
    from;
    "../../types";
    {
        KeywordCxt;
    }
    from;
    "../../compile/validate";
    var codegen_1 = require("../../compile/codegen");
    var util_1 = require("../../compile/util");
    var equal_1 = require("../../runtime/equal");
    "enum", { allowedValues: any[] }, any[] | { $data: string } >
    ;
    var error = {
        message: "must be equal to one of the allowed values",
        params: function (_a) {
            var schemaCode = _a.schemaCode;
            return (_b = ["{allowedValues: ", "}"], _b.raw = ["{allowedValues: ", "}"], codegen_1._(_b, schemaCode));
            var _b;
        },
    };
    var def = {
        keyword: "enum",
        schemaType: "array",
        $data: true,
        error: error,
        code: function (cxt) {
            var gen = cxt.gen, data = cxt.data, $data = cxt.$data, schema = cxt.schema, schemaCode = cxt.schemaCode, it = cxt.it;
            if (!$data && schema.length === 0)
                throw new Error("enum must have non-empty array");
            var useLoop = schema.length >= it.opts.loopEnum;
            var eql = util_1.useFunc(gen, equal_1.default);
            var valid;
            if (useLoop || $data) {
                valid = gen.let("valid");
                cxt.block$data(valid, loopEnum);
            }
            else {
                /* istanbul ignore if */
                if (!Array.isArray(schema))
                    throw new Error("ajv implementation error");
                var vSchema = gen.const("vSchema", schemaCode);
                valid = codegen_1.or.apply(void 0, schema.map(function (_x, i) { return equalCode(vSchema, i); }));
            }
            cxt.pass(valid);
            function loopEnum() {
                gen.assign(valid, false);
                gen.forOf("v", schemaCode, as, codegen_1.Code, function (v) {
                    return gen.if((_a = ["", "(", ", ", ")"], _a.raw = ["", "(", ", ", ")"], codegen_1._(_a, eql, data, v)), function () { return gen.assign(valid, true).break(); });
                    var _a;
                });
            }
            function equalCode(vSchema, i) {
                var sch = schema[i];
                return sch && typeof sch === "object"
                    ? (_a = ["", "(", ", ", "[", "])"], _a.raw = ["", "(", ", ", "[", "])"], codegen_1._(_a, eql, data, vSchema, i))
                    : (_b = ["", " === ", ""], _b.raw = ["", " === ", ""], codegen_1._(_b, data, sch));
                var _a, _b;
            }
        },
    };
    exports.default = def;
});
