(function (deps, factory) {
    if (typeof module === 'object' && typeof module.exports === 'object') {
        var v = factory(require, exports); if (v !== undefined) module.exports = v;
    }
    else if (typeof define === 'function' && define.amd) {
        define(deps, factory);
    }
})(["require", "exports", "../../compile/codegen"], function (require, exports) {
    {
        CodeKeywordDefinition, ErrorObject, KeywordErrorDefinition;
    }
    from;
    "../../types";
    {
        KeywordCxt;
    }
    from;
    "../../compile/validate";
    var codegen_1 = require("../../compile/codegen");
    var ops = codegen_1.operators;
    "maximum" | "minimum" | "exclusiveMaximum" | "exclusiveMinimum";
    "<=" | ">=" | "<" | ">";
    var KWDs = {
        maximum: { okStr: "<=", ok: ops.LTE, fail: ops.GT },
        minimum: { okStr: ">=", ok: ops.GTE, fail: ops.LT },
        exclusiveMaximum: { okStr: "<", ok: ops.LT, fail: ops.GTE },
        exclusiveMinimum: { okStr: ">", ok: ops.GT, fail: ops.LTE },
    };
    var error = {
        message: function (_a) {
            var keyword = _a.keyword, schemaCode = _a.schemaCode;
            return (_b = ["must be ", ""], _b.raw = ["must be ", ""], codegen_1.str(_b, KWDs[keyword]));
            var _b;
        }, as: Kwd, okStr: okStr }, $ = (_a = [",\n  params: ({keyword, schemaCode}) =>\n    _"], _a.raw = [",\n  params: ({keyword, schemaCode}) =>\n    _"], ({ schemaCode: schemaCode })(_a)), _b = ",\n}\n\nconst def: CodeKeywordDefinition = {\n  keyword: Object.keys(KWDs),\n  type: \"number\",\n  schemaType: \"number\",\n  $data: true,\n  error,\n  code(cxt: KeywordCxt) {\n    const {keyword, data, schemaCode} = cxt\n    cxt.fail$data(_", _c = _b.comparison, $ = _c === void 0 ? { KWDs: [keyword, as, Kwd].okStr } : _c, _d = _b.limit, $ = _d === void 0 ? { schemaCode: schemaCode } : _d, $ = { data: data }, $ = { KWDs: [keyword, as, Kwd].fail }, $ = { schemaCode: schemaCode } || (_e = [")\n  },\n}\n\nexport default def\n"], _e.raw = [")\n  },\n}\n\nexport default def"], isNaN($, { data: data })(_e));
    var _a, _e;
});
