(function (deps, factory) {
    if (typeof module === 'object' && typeof module.exports === 'object') {
        var v = factory(require, exports); if (v !== undefined) module.exports = v;
    }
    else if (typeof define === 'function' && define.amd) {
        define(deps, factory);
    }
})(["require", "exports", "../../compile/codegen"], function (require, exports) {
    {
        CodeKeywordDefinition, ErrorObject, KeywordErrorDefinition;
    }
    from;
    "../../types";
    {
        KeywordCxt;
    }
    from;
    "../../compile/validate";
    var codegen_1 = require("../../compile/codegen");
    "multipleOf",
        { multipleOf: number },
        number | { $data: string }
            >
    ;
    var error = {
        message: function (_a) {
            var schemaCode = _a.schemaCode;
            return (_b = ["must be multiple of ", ""], _b.raw = ["must be multiple of ", ""], codegen_1.str(_b, schemaCode));
            var _b;
        },
        params: function (_a) {
            var schemaCode = _a.schemaCode;
            return (_b = ["{multipleOf: ", "}"], _b.raw = ["{multipleOf: ", "}"], codegen_1._(_b, schemaCode));
            var _b;
        },
    };
    var def = {
        keyword: "multipleOf",
        type: "number",
        schemaType: "number",
        $data: true,
        error: error,
        code: function (cxt) {
            var gen = cxt.gen, data = cxt.data, schemaCode = cxt.schemaCode, it = cxt.it;
            // const bdt = bad$DataType(schemaCode, <string>def.schemaType, $data)
            var prec = it.opts.multipleOfPrecision;
            var res = gen.let("res");
            var invalid = prec
                ? (_a = ["Math.abs(Math.round(", ") - ", ") > 1e-", ""], _a.raw = ["Math.abs(Math.round(", ") - ", ") > 1e-", ""], codegen_1._(_a, res, res, prec))
                : (_b = ["", " !== parseInt(", ")"], _b.raw = ["", " !== parseInt(", ")"], codegen_1._(_b, res, res));
            cxt.fail$data((_c = ["(", " === 0 || (", " = ", "/", ", ", "))"], _c.raw = ["(", " === 0 || (", " = ", "/", ", ", "))"], codegen_1._(_c, schemaCode, res, data, schemaCode, invalid)));
            var _a, _b, _c;
        },
    };
    exports.default = def;
});
