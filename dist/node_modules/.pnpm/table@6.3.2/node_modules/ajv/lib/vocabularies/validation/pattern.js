(function (deps, factory) {
    if (typeof module === 'object' && typeof module.exports === 'object') {
        var v = factory(require, exports); if (v !== undefined) module.exports = v;
    }
    else if (typeof define === 'function' && define.amd) {
        define(deps, factory);
    }
})(["require", "exports", "../code", "../../compile/codegen"], function (require, exports) {
    {
        CodeKeywordDefinition, ErrorObject, KeywordErrorDefinition;
    }
    from;
    "../../types";
    {
        KeywordCxt;
    }
    from;
    "../../compile/validate";
    var code_1 = require("../code");
    var codegen_1 = require("../../compile/codegen");
    "pattern", { pattern: string }, string | { $data: string } >
    ;
    var error = {
        message: function (_a) {
            var schemaCode = _a.schemaCode;
            return (_b = ["must match pattern \"", "\""], _b.raw = ["must match pattern \"", "\""], codegen_1.str(_b, schemaCode));
            var _b;
        },
        params: function (_a) {
            var schemaCode = _a.schemaCode;
            return (_b = ["{pattern: ", "}"], _b.raw = ["{pattern: ", "}"], codegen_1._(_b, schemaCode));
            var _b;
        },
    };
    var def = {
        keyword: "pattern",
        type: "string",
        schemaType: "string",
        $data: true,
        error: error,
        code: function (cxt) {
            var data = cxt.data, $data = cxt.$data, schema = cxt.schema, schemaCode = cxt.schemaCode, it = cxt.it;
            // TODO regexp should be wrapped in try/catchs
            var u = it.opts.unicodeRegExp ? "u" : "";
            var regExp = $data ? (_a = ["(new RegExp(", ", ", "))"], _a.raw = ["(new RegExp(", ", ", "))"], codegen_1._(_a, schemaCode, u)) : code_1.usePattern(cxt, schema);
            cxt.fail$data((_b = ["!", ".test(", ")"], _b.raw = ["!", ".test(", ")"], codegen_1._(_b, regExp, data)));
            var _a, _b;
        },
    };
    exports.default = def;
});
